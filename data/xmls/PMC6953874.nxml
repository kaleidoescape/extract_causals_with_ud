<!DOCTYPE article
PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.2 20190208//EN" "JATS-archivearticle1-mathml3.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">PLoS One</journal-id><journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="pmc">plosone</journal-id><journal-title-group><journal-title>PLoS ONE</journal-title></journal-title-group><issn pub-type="epub">1932-6203</issn><publisher><publisher-name>Public Library of Science</publisher-name><publisher-loc>San Francisco, CA USA</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">31923244</article-id><article-id pub-id-type="pmc">6953874</article-id><article-id pub-id-type="publisher-id">PONE-D-19-12795</article-id><article-id pub-id-type="doi">10.1371/journal.pone.0227049</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social Sciences</subject><subj-group><subject>Economics</subject><subj-group><subject>Commerce</subject><subj-group><subject>Payment</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical Sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Optimization</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical Sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Applied Mathematics</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and Analysis Methods</subject><subj-group><subject>Simulation and Modeling</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical Sciences</subject><subj-group><subject>Physics</subject><subj-group><subject>Electricity</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical Sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Applied Mathematics</subject><subj-group><subject>Game Theory</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Behavior</subject><subj-group><subject>Recreation</subject><subj-group><subject>Games</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social Sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Behavior</subject><subj-group><subject>Recreation</subject><subj-group><subject>Games</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive Science</subject><subj-group><subject>Cognition</subject><subj-group><subject>Memory</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Learning and Memory</subject><subj-group><subject>Memory</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Behavior</subject><subj-group><subject>Conditioned Response</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social Sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Behavior</subject><subj-group><subject>Conditioned Response</subject></subj-group></subj-group></subj-group></subj-group></article-categories><title-group><article-title>The Shapley value for a fair division of group discounts for coordinating cooling loads</article-title><alt-title alt-title-type="running-head">The Shapley value for a fair division of group discounts for coordinating cooling loads</alt-title></title-group><contrib-group><contrib contrib-type="author"><contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-2945-0737</contrib-id><name><surname>Maleki</surname><given-names>Sasan</given-names></name><role content-type="http://credit.casrai.org/">Conceptualization</role><role content-type="http://credit.casrai.org/">Data curation</role><role content-type="http://credit.casrai.org/">Formal analysis</role><role content-type="http://credit.casrai.org/">Investigation</role><role content-type="http://credit.casrai.org/">Methodology</role><role content-type="http://credit.casrai.org/">Resources</role><role content-type="http://credit.casrai.org/">Software</role><role content-type="http://credit.casrai.org/">Visualization</role><role content-type="http://credit.casrai.org/">Writing &#x02013; original draft</role><role content-type="http://credit.casrai.org/">Writing &#x02013; review &#x00026; editing</role><xref ref-type="aff" rid="aff001"><sup>1</sup></xref><xref ref-type="corresp" rid="cor001">*</xref></contrib><contrib contrib-type="author"><name><surname>Rahwan</surname><given-names>Talal</given-names></name><role content-type="http://credit.casrai.org/">Conceptualization</role><role content-type="http://credit.casrai.org/">Formal analysis</role><role content-type="http://credit.casrai.org/">Investigation</role><role content-type="http://credit.casrai.org/">Methodology</role><role content-type="http://credit.casrai.org/">Supervision</role><role content-type="http://credit.casrai.org/">Writing &#x02013; original draft</role><role content-type="http://credit.casrai.org/">Writing &#x02013; review &#x00026; editing</role><xref ref-type="aff" rid="aff002"><sup>2</sup></xref></contrib><contrib contrib-type="author"><name><surname>Ghosh</surname><given-names>Siddhartha</given-names></name><role content-type="http://credit.casrai.org/">Data curation</role><role content-type="http://credit.casrai.org/">Investigation</role><xref ref-type="aff" rid="aff003"><sup>3</sup></xref></contrib><contrib contrib-type="author"><name><surname>Malibari</surname><given-names>Areej</given-names></name><role content-type="http://credit.casrai.org/">Funding acquisition</role><role content-type="http://credit.casrai.org/">Resources</role><xref ref-type="aff" rid="aff004"><sup>4</sup></xref></contrib><contrib contrib-type="author"><contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5533-3203</contrib-id><name><surname>Alghazzawi</surname><given-names>Daniyal</given-names></name><role content-type="http://credit.casrai.org/">Funding acquisition</role><role content-type="http://credit.casrai.org/">Resources</role><xref ref-type="aff" rid="aff005"><sup>5</sup></xref></contrib><contrib contrib-type="author"><name><surname>Rogers</surname><given-names>Alex</given-names></name><role content-type="http://credit.casrai.org/">Conceptualization</role><role content-type="http://credit.casrai.org/">Funding acquisition</role><role content-type="http://credit.casrai.org/">Supervision</role><role content-type="http://credit.casrai.org/">Validation</role><role content-type="http://credit.casrai.org/">Writing &#x02013; review &#x00026; editing</role><xref ref-type="aff" rid="aff006"><sup>6</sup></xref></contrib><contrib contrib-type="author"><name><surname>Beigy</surname><given-names>Hamid</given-names></name><role content-type="http://credit.casrai.org/">Supervision</role><xref ref-type="aff" rid="aff001"><sup>1</sup></xref></contrib><contrib contrib-type="author"><name><surname>Jennings</surname><given-names>Nicholas R.</given-names></name><role content-type="http://credit.casrai.org/">Funding acquisition</role><role content-type="http://credit.casrai.org/">Supervision</role><role content-type="http://credit.casrai.org/">Validation</role><role content-type="http://credit.casrai.org/">Writing &#x02013; review &#x00026; editing</role><xref ref-type="aff" rid="aff007"><sup>7</sup></xref></contrib></contrib-group><aff id="aff001">
<label>1</label>
<addr-line>Department of Computer Engineering, Sharif University of Technology, Tehran, Iran</addr-line>
</aff><aff id="aff002">
<label>2</label>
<addr-line>Computer Science, New York University Abu Dhabi, Abu Dhabi, UAE</addr-line>
</aff><aff id="aff003">
<label>3</label>
<addr-line>Electronics and Computer Science, University of Southampton, Southampton, United Kingdom</addr-line>
</aff><aff id="aff004">
<label>4</label>
<addr-line>Computer Science Department, King Abdulaziz University, Jeddah, Saudi Arabia</addr-line>
</aff><aff id="aff005">
<label>5</label>
<addr-line>Information Systems Department, King Abdulaziz University, Jeddah, Saudi Arabia</addr-line>
</aff><aff id="aff006">
<label>6</label>
<addr-line>Department of Computer Science, Oxford University, Oxford, United Kingdom</addr-line>
</aff><aff id="aff007">
<label>7</label>
<addr-line>Department of Computing, Imperial College London, Oxford, United Kingdom</addr-line>
</aff><contrib-group><contrib contrib-type="editor"><name><surname>Xin</surname><given-names>Baogui</given-names></name><role>Editor</role><xref ref-type="aff" rid="edit1"/></contrib></contrib-group><aff id="edit1">
<addr-line>Shandong University of Science and Technology, CHINA</addr-line>
</aff><author-notes><fn fn-type="COI-statement" id="coi001"><p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p></fn><corresp id="cor001">* E-mail: <email>smaleki@ce.sharif.edu</email></corresp></author-notes><pub-date pub-type="collection"><year>2020</year></pub-date><pub-date pub-type="epub"><day>10</day><month>1</month><year>2020</year></pub-date><volume>15</volume><issue>1</issue><elocation-id>e0227049</elocation-id><history><date date-type="received"><day>6</day><month>5</month><year>2019</year></date><date date-type="accepted"><day>11</day><month>12</month><year>2019</year></date></history><permissions><copyright-statement>&#x000a9; 2020 Maleki et al</copyright-statement><copyright-year>2020</copyright-year><copyright-holder>Maleki et al</copyright-holder><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions><self-uri content-type="pdf" xlink:href="pone.0227049.pdf"/><abstract><p>We consider a demand response program in which a block of apartments receive a discount from their electricity supplier if they ensure that their aggregate load from air conditioning does not exceed a predetermined threshold. The goal of the participants is to obtain the discount, while ensuring that their individual temperature preferences are also satisfied. As such, the apartments need to collectively optimise their use of air conditioning so as to satisfy these constraints and minimise their costs. Given an optimal cooling profile that secures the discount, the problem that the apartments face then is to divide the total discounted cost in a fair way. To achieve this, we take a coalitional game approach and propose the use of the Shapley value from cooperative game theory, which is the normative payoff division mechanism that offers a unique set of desirable fairness properties. However, applying the Shapley value in this setting presents a novel computational challenge. This is because its calculation requires, as input, the cost of every subset of apartments, which means solving an exponential number of collective optimisations, each of which is a computationally intensive problem. To address this, we propose solving the optimisation problem of each subset suboptimally, to allow for acceptable solutions that require less computation. We show that, due to the linearity property of the Shapley value, if suboptimal costs are used rather than optimal ones, the division of the discount will be fair in the following sense: each apartment is fairly &#x0201c;rewarded&#x0201d; for its contribution to the optimal cost and, at the same time, is fairly &#x0201c;penalised&#x0201d; for its contribution to the discrepancy between the suboptimal and the optimal costs. Importantly, this is achieved without requiring the optimal solutions.</p></abstract><funding-group><funding-statement>SM received a post-doctoral fellowship from the National Elites Foundation of Iran. TR, SG, AR and NJ were supported by the EPSRC in the United Kingdom through "Intelligent Agents for Home Energy Management" project (EP/I000143/1) and ORCHID programme grant (EP/I011587/1). AM, DA and NJ were supported by the Deanship of Scientific Research at King Abdulaziz University (9-15-1432-HiCi). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement></funding-group><counts><fig-count count="7"/><table-count count="3"/><page-count count="28"/></counts><custom-meta-group><custom-meta id="data-availability"><meta-name>Data Availability</meta-name><meta-value>All relevant data are within the paper and its Supporting Information files.</meta-value></custom-meta></custom-meta-group></article-meta><notes><title>Data Availability</title><p>All relevant data are within the paper and its Supporting Information files.</p></notes></front><body><sec sec-type="intro" id="sec001"><title>Introduction</title><p>The transition to a smart electricity grid presents one of the greatest engineering challenges of this century, as countries face dwindling non-renewable energy sources and work to minimise the adverse effects of greenhouse gas emissions [<xref rid="pone.0227049.ref001" ref-type="bibr">1</xref>]. The Smart Grid represents a modern vision of a dynamic electricity grid, where the delivery, monitoring, and control of power are fully automated [<xref rid="pone.0227049.ref002" ref-type="bibr">2</xref>]. Currently, due to the high costs of upgrading equipment, it is often more economically viable for countries to create smart grids within the limits of the existing infrastructure, and pave way for the integration of renewable sources. However, this places a burden on conventional suppliers with ageing equipment to better manage supply and demand such that not only is the balance maintained at all times, but also peak demand is reduced.</p><p>Peaks in consumption are a consequence of unregulated demand. Meeting peaks needs large generation capacities which are only in use during peak periods. This is a significant inefficiency from a technical and financial point of view. This problem can be addressed through demand response programs by distributing peak loads throughout the day. To encourage consumers, financial incentives must be given, so that they shift their loads to off-peak periods. Policies that enforce such user behaviour are based on dynamic pricing which take into account changes in demand. This is in contrast to static pricing, such as flat tariffs, which offer electricity at fixed rates, regardless of the load.</p><p>Researchers divide electricity tariffs into the following categories: flat, block rate, seasonal, time of use, superpeak time of use, critical peak, variable peak, real-time, and peak-time rebates [<xref rid="pone.0227049.ref003" ref-type="bibr">3</xref>&#x02013;<xref rid="pone.0227049.ref005" ref-type="bibr">5</xref>]. Under flat tariffs, prices remain fixed even with changes in demand. Block rate tariffs offer tier based pricing, where higher levels of consumption are charged at higher rates. Seasonal rates change from one season to another, to reflect increase or decrease in demand due to the time of year. Time of use, superpeak time of use, critical peak and variable peak charge users based on pre-declared rates that vary depending on the time of day. They are generally designed such that prices are high during peak hours and low during off-peak hours, with the difference being the duration and start of peak hours. Real-time tariffs offer prices that are adjusted every few minutes to the real cost of generation and delivery. Finally, peak time rebate schemes provide rebates for consuming below a predetermined threshold during peak hours.</p><p>Against this background, we design a demand response program whereby a block of apartments are rewarded for coordinating their cooling loads. More specifically, in order to encourage consumers to use less energy for air conditioning, which constitutes a significant amount of electricity consumption in warm-climate countries [<xref rid="pone.0227049.ref006" ref-type="bibr">6</xref>, <xref rid="pone.0227049.ref007" ref-type="bibr">7</xref>], the electricity supplier offers a discount scheme similar to peak time rebate tariffs, but for a group of apartments. If the aggregate cooling load of all apartments in a block that sign up to the scheme does not exceed a certain threshold, they will be offered a discounted price for the entire day. To achieve the discount, the apartments coordinate and optimise their loads collectively, while also ensuring that their individual temperature preferences are met. Each householder specifies their preference in terms of deviations of the internal temperature from a setpoint temperature over a period of the day during which comfort is desired. Given a coalition of apartments, one can formulate a binary integer program so as to find the optimal cooling plan of each member, such that all temperature constraints as well as the load threshold are all satisfied. A cooling plan determines the periods of time when each apartment is allowed to turn on their air conditioning, which in turn, determines the cost of individual apartments.</p><p>Once the cooling plans that secure the discount are determined, the primary question that arises is how the apartments should divide the discount among themselves. Since the apartments need to cooperate together to get the discount, it is important that the way the discount is divided prevents abuse. For instance, it is possible that some apartments act as free-riders [<xref rid="pone.0227049.ref008" ref-type="bibr">8</xref>, <xref rid="pone.0227049.ref009" ref-type="bibr">9</xref>]. That is, some apartments may not cooperate as much but reap the benefit of the joint effort at the cost of other apartments. Therefore, our aim is to put forward a division mechanism that is fair to all participants in the program. The most straightforward solutions that may come to mind are perhaps an equal division, or one proportional to consumptions. The former is obviously not necessarily fair, and the latter simply overlooks the complex interdependencies between apartments that actually result in the desirable coordination of loads. Moreover, as we discuss later, the thermal characteristics of apartments such as how well they are insulated, and how strict their preferences are, have a direct relationship with their ability to shift their loads. Therefore, the division must ensure that each apartment receives a share of the discount that corresponds to how much they have actually contributed to meeting the threshold and obtaining the discount.</p><p>Given this problem and its cooperative nature, we first propose that the apartments in the program are modelled as agents that form a coalition with the common goal of coordinating their cooling loads. This allows us to apply methods from cooperative game theory that will enable us to appropriately distribute the payoff of the game, which we define as the total cost of the grand coalition (i.e., the coalition that consists of all agents).</p><p>There are extensive studies in the smart grid domain on using cooperative game theory in this context [<xref rid="pone.0227049.ref010" ref-type="bibr">10</xref>&#x02013;<xref rid="pone.0227049.ref014" ref-type="bibr">14</xref>]. The majority of payoff distribution concepts in the literature are concerned with some sort of stability of coalitions. A well known such concept is called the <italic>core</italic>, which is a set of distributions that satisfy an exponential number of certain constraints [<xref rid="pone.0227049.ref015" ref-type="bibr">15</xref>]. If a payoff distribution is a member of the core it guarantees that no subgroups of agents can be better off by breaking away and forming a different coalition. The drawback of the core is that, in the general case, it does not always exist and is difficult to compute. In fact, for several well studied problems it is co-NP-complete to even check whether a payoff distribution is a member of the core [<xref rid="pone.0227049.ref016" ref-type="bibr">16</xref>, <xref rid="pone.0227049.ref017" ref-type="bibr">17</xref>]. Another stability concept, called the bargaining, deals with the dissatisfaction of agents with the share of payoff they receive. Suppose that an agent that is allocated a share of the payoff is unsatisfied with it. It can make an objection to it by requesting some part of the share of a particular agent. If that agent does not challenge this request, it is called a justified objection. The set of payoff distributions in which no agent has a justified objection against any other agent is the bargaining set and is always a superset of the core [<xref rid="pone.0227049.ref018" ref-type="bibr">18</xref>]. A somewhat similar concept is the <italic>kernel</italic> with weaker stability constraints than the core. The idea is that agents compare their strength with one another in terms of how much more they can gain by forming a new coalition. If their strengths differ, stronger agents can threaten to leave, unless they receive a higher payoff that balances the strengths [<xref rid="pone.0227049.ref015" ref-type="bibr">15</xref>].</p><p>In addition to the stability solution concepts, the Shapley value is a widely celebrated method in the literature that focuses on fairness of payoff distributions [<xref rid="pone.0227049.ref019" ref-type="bibr">19</xref>]. It satisfies a number of desirable fairness axioms (see Section <xref ref-type="sec" rid="sec002">cooperative game theory definitions</xref>), and is the only payoff division that does so. The Shapley value is based on the idea that the payoff of the game should be divided such that each agent&#x02019;s share is proportional to its contribution to the payoff. This characteristic is particularly useful in our problem, given that we would like to divide the discount based on how much each apartment has contributed to it. Therefore, we use the Shapley value to divide the total cost of cooling all apartments. As we will explain later, this then results in a fair division of the discount.</p><p>However, the use of Shapley value in our problem poses two computational challenges: (i) the time complexity of the Shapley value itself, which is exponential in the number of agents, and (ii) solving an exponential number of binary integer programs, each being an NP-hard problem, in order to find the value (i.e., consumption cost) of every possible coalition. To address the former issue, several algorithms have been proposed to approximate, rather than calculate, the Shapley value [<xref rid="pone.0227049.ref020" ref-type="bibr">20</xref>&#x02013;<xref rid="pone.0227049.ref024" ref-type="bibr">24</xref>]. Most of these approximations work by considering only a sample of coalition values, thus avoiding the need to consider an exponential number of such values. However, to obtain a reasonable bound on the approximation, the sample would often consist of tens of thousands (or more) of coalition values. In our setting, even a single coalition value can be hard to compute. In such a case, sampling techniques will fail, and a fundamentally different approach is needed in order to tackle the computational challenge. As such, we focus on mitigating the second issue, by assuming that coalitions are <italic>computationally bounded rational</italic>. That is, a coalition would internalise its limited computational resources when making decisions. This is opposite to most typical scenarios where agents are assumed to be perfectly rational (i.e., they are able to maximise their utility), which may not be always possible due to the limited computational resources of agents.</p><p>In the demand response problem stated above, we trade off optimality for the feasibility of dividing the total cost in a fair way, we model coalitions as computationally bounded rational. That is, due to limited computational resources, the <italic>rational value</italic> of each coalition (i.e., the optimal solution to the coalition&#x02019;s load optimisation problem) cannot be computed in a reasonable time. More specifically, building upon the bounded rationality model proposed by Sandholm and Lesser [<xref rid="pone.0227049.ref025" ref-type="bibr">25</xref>] we argue that, given a suboptimal value for each coalition, it is still possible to divide the discount in a fair way. Our proposition leverages the additivity axiom [<xref rid="pone.0227049.ref019" ref-type="bibr">19</xref>], whereby the Shapley value of a game can be represented as the sum of the Shapley values of some alternative games (see section shapley value of bounded rational agents). Based on this, we represent the Shapley value of the game where every coalition is assigned its rational value as the sum of the Shapley values of two games:</p><list list-type="bullet"><list-item><p>The game where the value of any coalition is its <italic>bounded rational value</italic>&#x02014;the total consumption of the coalition given the best suboptimal solution found to the load optimisation problem.</p></list-item><list-item><p>The game where the value of any coalition is its <italic>rationality discrepancy</italic> (i.e., the difference between its rational and bounded rational values).</p></list-item></list><p>Importantly, the <italic>bounded rational</italic> coalition values are possible to calculate, while using the limited computational resources available the <italic>rational</italic> values and the <italic>rationality discrepancy</italic> are not. As such, we can only compute the Shapley value of the game with bounded rational coalition values. We call this the <italic>bounded rational Shapley value</italic>. We argue that this payoff division scheme is fair in that it produces a payoff distribution that results from the following procedure (which is impossible to carry out given the available limited resources):</p><list list-type="bullet"><list-item><p><italic>Step 1</italic>: Divide the rational value of the grand coalition (despite the fact that we do not know it) &#x0201c;fairly&#x0201d; among the agents, i.e., in a way that meets Shapley&#x02019;s axioms. Intuitively, the share of each agent can be thought of as a <italic>reward</italic> for its contribution to the rational value.</p></list-item><list-item><p><italic>Step 2</italic>: Divide the rationality discrepancy of the grand coalition (which again is unknown) fairly among the agents, in a way that meets Shapley&#x02019;s axioms. Intuitively, each share can be thought of as a <italic>penalty</italic> for contributing to the failure of finding the rational value in reasonable time. For instance, if the presence of an agent in any coalition consistently increases the rational discrepancy (e.g., due to the agent&#x02019;s strict constraints which increase the time required to compute the rational value), then this agent will be penalised. Note that the penalty may be negative if coalition values represent a cost.</p></list-item><list-item><p><italic>Step 3</italic>: Assign to each agent its fair reward minus its fair penalty.</p></list-item></list><p>Given this division mechanism, we introduce two greedy algorithms for optimising the cooling plan of apartments individually and collectively. These algorithms will help us find a reasonably good (but not necessarily optimal) solution in a timely manner, and as we explain later, these algorithms have useful features that we exploit to significantly expedite the optimisation of coalition loads. In more detail, the first algorithm incrementally finds intervals in a given day in which switching on the air conditioner results in the largest reduction of the discrepancy between householder&#x02019;s preferences and the estimated temperature during the comfort period. The second algorithm optimises the load of a coalition of apartments (subject to the predetermined threshold and individual temperature preferences) by shifting the load of apartments that are more flexible in terms of their preferences. This algorithm exploits the fact that the more flexible an apartment is, the easier its preferences are satisfied. Using these two algorithms, we can identify a suboptimal coordination of loads (leading to a potentially lower saving from the discount compared to the optimal solution), while satisfying the householders&#x02019; temperature preferences. Then, our bounded rationality proposition establishes that, it is possible to obtain a fair division of the discount using the Shapley value.</p><p>As we mentioned earlier, the bounded rational Shapley value requires a suboptimal value for <italic>every</italic> coalition. To obtain this value, we use the above greedy algorithms to determine the minimum cost of the coalition when they coordinate their loads. However, instead of running the algorithms over and over for every coalition, we show that this process can be carried out much more efficiently using a dedicated dynamic programming algorithm. This is because the information accrued from the optimised load of a coalition can be re-used in optimising the load of some other coalitions.</p><p>Finally, our experimental results evaluate how the costs incurred by an apartment vary, as its cooling preferences are changed, on a single day. We compare the costs that an apartment would be charged for its consumption in four different cases: (i) when the apartment does not sign up to the discount scheme and optimises its load independently, (ii) when the apartment optimises its load as a member of the coalition and and benefits from the discount, but only its consumption in the grand coalition is considered (unlike the Shapley value which considers all subsets of the grand coalition), (iii) when the apartment optimises its load as a member of the coalition and each apartment receives an equal share of the total saving from the discount (the difference between the payment of the grand coalition at the discounted and normal rates is equally divided and deducted from the payment of each apartment), and (iv) when the apartment optimises its load as a member of the coalition and receives its bounded rational Shapley value. The results show that with higher setpoint temperatures the payments drop, with higher rates of thermal leakage (poorer insulation) they increase, and with higher tolerances of setpoint deviation the payments decrease.</p><p>In summary, our main technical contribution in this paper includes: (i) exploiting an often less noted property of the Shapley value to extend it to games with bounded rationality, (ii) designing a demand response program to help mitigate peaks caused by cooling loads, (iii) designing two greedy algorithms to coordinate the loads of individual and groups of apartments to cap aggregate loads and avoid peaks, and (iv) developing a dynamic program for the greedy algorithms to speed up calculation of the Shapley value even further.</p><p>The rest of this article is organised as follows. Section cooperative game theory definitions introduces cooperative game theory definitions and provides a background on the Shapley value. Section coordinating cooling loads discount scheme formalises the discount scheme as a cooperative game. Sections thermal dynamics of apartments and user comfort model present formal models of thermal dynamics of apartments and the cooling preferences of users. In sections independent optimisation of loads and collective optimisation of loads we formalise the problem of optimising cooling loads of apartments individually and as coalitions. Section an example with three apartments provides an example of optimising the load of a block consisting of three apartments. In section computationally efficient optimisation of loads, we provide two greedy algorithms for efficient optimisation of loads. In section calculating payments using the Shapley value, we present the bounded rationality model and provide a dynamic programming algorithm to calculate the Shapley value efficiently. Section evaluation of the payments of apartments presents an experimental evaluation of our model and algorithms. Finally, section conclusions and future work concludes the article and states potential directions for future work.</p></sec><sec id="sec002"><title>Cooperative game theory definitions</title><p>In this section, we introduce cooperative game theory notations and definitions, borrowed from [<xref rid="pone.0227049.ref015" ref-type="bibr">15</xref>], which we will refer to throughout the paper. Given a set of agents, <italic>N</italic> = {1, &#x02026;, <italic>n</italic>}, a <italic>coalition</italic>
<italic>C</italic> is a subset of <italic>N</italic>. The coalition <italic>N</italic> is referred to as the <italic>grand coalition</italic>. The value or worth of a coalition is expressed by a <italic>characteristic function</italic>, <italic>v</italic>, which maps each subset of <italic>N</italic> to a real number, i.e., <inline-formula id="pone.0227049.e001"><alternatives><graphic xlink:href="pone.0227049.e001.jpg" id="pone.0227049.e001g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M1"><mml:mrow><mml:mi>v</mml:mi><mml:mo>:</mml:mo><mml:msup><mml:mn>2</mml:mn><mml:mi>N</mml:mi></mml:msup><mml:mo>&#x021a6;</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>. A cooperative characteristic function game is specified using a pair, (<italic>N</italic>, <italic>v</italic>), consisting of the set of agents <italic>N</italic> and a characteristic function <italic>v</italic>. A <italic>payoff distribution</italic> is a vector <italic>x</italic> = [<italic>x</italic><sub>1</sub>&#x02026;<italic>x</italic><sub><italic>n</italic></sub>], where <italic>x</italic><sub><italic>i</italic></sub> represents how much of the value of the coalition should be allocated to agent <italic>i</italic>. A game is <italic>super-additive</italic> if the value of every coalition is at least equal to the sum of the values of any two disjoint subsets of that coalition, i.e., &#x02200;<italic>C</italic>, <italic>D</italic> &#x02286; <italic>N</italic>;<italic>C</italic> &#x02229; <italic>D</italic> = &#x02205; &#x021d2; <italic>v</italic>(<italic>C</italic> &#x0222a; <italic>D</italic>) &#x02265; <italic>v</italic>(<italic>C</italic>) + <italic>v</italic>(<italic>D</italic>).</p><sec id="sec003"><title>The Shapley value</title><p>In order for the agents to evaluate their prospects of playing a superadditive game, Shapley proposed a <italic>value</italic> [<xref rid="pone.0227049.ref019" ref-type="bibr">19</xref>], whereby agents receive a payoff equal to their value. More specifically, Shapley argued that a coalition of <italic>n</italic> agents can form in <italic>n</italic>! different ways (considering all the possible joining orders), and that in each order, as an agent steps in the coalition, it makes a <italic>marginal contribution</italic> to the agents who joined before it. The marginal contribution of agent <italic>i</italic> to coalition <italic>C</italic> is the difference in <italic>C</italic>&#x02019;s value that is due to <italic>i</italic> joining <italic>C</italic>, i.e., it is equal to <italic>v</italic>(<italic>C</italic> &#x0222a; {<italic>i</italic>}) &#x02212; <italic>v</italic>(<italic>C</italic>). Shapley argued that the fair way to divide the payoff of the grand coalition is to allocate each agent its average marginal contribution in all joining orders. This solution concept is known as the Shapley value. More formally, the Shapley value of agent <italic>i</italic> in game (<italic>N</italic>, <italic>v</italic>) is calculated as:
<disp-formula id="pone.0227049.e002"><alternatives><graphic xlink:href="pone.0227049.e002.jpg" id="pone.0227049.e002g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M2"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>&#x003d5;</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:mtd><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mi>n</mml:mi><mml:mo>!</mml:mo></mml:mrow></mml:mfrac><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>&#x003c0;</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mo>&#x003a0;</mml:mo><mml:mo>(</mml:mo><mml:mi>N</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:munder><mml:mo>[</mml:mo><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msubsup><mml:mi>P</mml:mi><mml:mi>i</mml:mi><mml:mi>&#x003c0;</mml:mi></mml:msubsup><mml:mo>&#x0222a;</mml:mo><mml:mo>{</mml:mo><mml:mi>i</mml:mi><mml:mo>}</mml:mo><mml:mo>)</mml:mo></mml:mrow><mml:mo>-</mml:mo><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msubsup><mml:mi>P</mml:mi><mml:mi>i</mml:mi><mml:mi>&#x003c0;</mml:mi></mml:msubsup><mml:mo>)</mml:mo></mml:mrow><mml:mo>]</mml:mo></mml:mrow></mml:mstyle></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(1a)</label></disp-formula>
<disp-formula id="pone.0227049.e003"><alternatives><graphic xlink:href="pone.0227049.e003.jpg" id="pone.0227049.e003g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M3"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd/><mml:mtd><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mo>=</mml:mo><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>C</mml:mi><mml:mo>&#x02286;</mml:mo><mml:mi>N</mml:mi><mml:mo>\</mml:mo><mml:mo>{</mml:mo><mml:mi>i</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:munder><mml:mfrac><mml:mrow><mml:mo>|</mml:mo><mml:mi>C</mml:mi><mml:mo>|</mml:mo><mml:mo>!</mml:mo><mml:mspace width="0.277778em"/><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mo>|</mml:mo><mml:mi>C</mml:mi><mml:mo>|</mml:mo><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mo>!</mml:mo></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>!</mml:mo></mml:mrow></mml:mfrac><mml:mrow><mml:mo>(</mml:mo><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>&#x0222a;</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:mi>i</mml:mi><mml:mo>}</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>-</mml:mo><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mspace width="4pt"/><mml:mo>,</mml:mo></mml:mrow></mml:mstyle></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(1b)</label></disp-formula>
where &#x003a0;(<italic>N</italic>) is a set containing all possible permutation of agents, and <inline-formula id="pone.0227049.e004"><alternatives><graphic xlink:href="pone.0227049.e004.jpg" id="pone.0227049.e004g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M4"><mml:msubsup><mml:mi>P</mml:mi><mml:mi>i</mml:mi><mml:mi>&#x003c0;</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> is the set of agents that precede <italic>i</italic> in the permutation <italic>&#x003c0;</italic>. We will refer to the coefficient of the marginal contributions in the second formula using the notation <italic>&#x003c9;</italic>. More formally, let <italic>s</italic> denote the size of coalition <italic>C</italic> in the marginal contribution <italic>v</italic>(<italic>C</italic> &#x0222a; {<italic>i</italic>}) &#x02212; <italic>v</italic>(<italic>C</italic>), this coefficient is given as:
<disp-formula id="pone.0227049.e005"><alternatives><graphic xlink:href="pone.0227049.e005.jpg" id="pone.0227049.e005g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M5"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>&#x003c9;</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>s</mml:mi><mml:mo>!</mml:mo><mml:mspace width="0.277778em"/><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>s</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mo>!</mml:mo></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>!</mml:mo></mml:mrow></mml:mfrac><mml:mspace width="4pt"/></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(2)</label></disp-formula></p><p>The Shapley value satisfies the axioms of <italic>symmetry</italic>, <italic>efficiency</italic>, <italic>null-player</italic>, and <italic>additivity</italic>. Symmetry states that if two agents make the same marginal contributions to any coalition, their values are equal. Efficiency implies that the value of the grand coalition is fully divided. The null-player axiom states that any player whose marginal contribution to every coalition is zero, would have a value of zero. Finally, the additivity axiom states that if a new game is obtained by adding the characteristic function of two different games with the same set of agents, the value of an agent in the new game is equal to the sum of its values in the two games. More formally:</p><list list-type="bullet"><list-item><p><bold>Symmetry</bold>: &#x02200;<italic>i</italic>, <italic>j</italic> &#x02208; <italic>N</italic> &#x02200;<italic>C</italic> &#x02286; <italic>N</italic>\{<italic>i</italic>, <italic>j</italic>} <italic>v</italic>(<italic>C</italic> &#x0222a; {<italic>i</italic>}) = <italic>v</italic>(<italic>C</italic> &#x0222a; {<italic>j</italic>}) &#x021d4; <italic>x</italic><sub><italic>i</italic></sub> = <italic>x</italic><sub><italic>j</italic></sub>;</p></list-item><list-item><p><bold>Efficiency</bold>: &#x02211;<sub><italic>i</italic>&#x02208;<italic>N</italic></sub>
<italic>x</italic><sub><italic>i</italic></sub> = <italic>v</italic>(<italic>N</italic>);</p></list-item><list-item><p><bold>Null player</bold>: &#x02200;<italic>i</italic> &#x02208; <italic>N</italic>&#x02200;<italic>C</italic> &#x02286; <italic>Nv</italic>(<italic>C</italic> &#x0222a; {<italic>i</italic>}) = <italic>v</italic>(<italic>C</italic>) &#x021d4; <italic>x</italic><sub><italic>i</italic></sub> = 0;</p></list-item><list-item><p><bold>Additivity</bold>: Let the game (<italic>N</italic>, <italic>v</italic>) be the <italic>sum</italic> of two other games, namely (<italic>N</italic>, <italic>v</italic><sub>1</sub>) and (<italic>N</italic>, <italic>v</italic><sub>2</sub>), i.e., &#x02200;<italic>C</italic> &#x02286; <italic>N</italic>, <italic>v</italic>(<italic>C</italic>) = <italic>v</italic><sub>1</sub>(<italic>C</italic>) + <italic>v</italic><sub>2</sub>(<italic>C</italic>). Furthermore, let <italic>x</italic>, <italic>x</italic><sup>1</sup>, <italic>x</italic><sup>2</sup> denote the payoff distributions of (<italic>N</italic>, <italic>v</italic>), (<italic>N</italic>, <italic>v</italic><sub>1</sub>), and (<italic>N</italic>, <italic>v</italic><sub>2</sub>), respectively. Then, the following holds: <inline-formula id="pone.0227049.e006"><alternatives><graphic xlink:href="pone.0227049.e006.jpg" id="pone.0227049.e006g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M6"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>N</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:msubsup><mml:mi>x</mml:mi><mml:mi>i</mml:mi><mml:mn>1</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>x</mml:mi><mml:mi>i</mml:mi><mml:mn>2</mml:mn></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>.</p></list-item></list><p>As is common in the literature, we say that a division of the grand coalition value is <italic>fair</italic> if it satisfies the above axioms. In fact, the Shapley value is the only value that satisfies them [<xref rid="pone.0227049.ref019" ref-type="bibr">19</xref>]. The Shapley value is also individual rationality in superadditive games (&#x02200;<italic>i</italic> &#x02208; <italic>N</italic>;<italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] &#x02265; <italic>v</italic>({<italic>i</italic>})).</p></sec></sec><sec id="sec004"><title>Coordinating cooling loads discount scheme</title><p>Consider a set of <italic>n</italic> apartments in a block, indexed by <italic>i</italic> &#x02208; <italic>N</italic> &#x02254; {1, 2, &#x02026;, <italic>n</italic>}. Denote by <inline-formula id="pone.0227049.e007"><alternatives><graphic xlink:href="pone.0227049.e007.jpg" id="pone.0227049.e007g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M7"><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> the cooling load of apartment <italic>i</italic> at time <italic>t</italic> (in kW), and denote by <italic>p</italic> the price at which every kWh is charged. In order to encourage consumers to use less energy for cooling, which constitutes a significant amount of the domestic load in warm-climate countries [<xref rid="pone.0227049.ref006" ref-type="bibr">6</xref>, <xref rid="pone.0227049.ref007" ref-type="bibr">7</xref>], the electricity supplier offers a discount scheme. Specifically, each apartment in a block is offered a binary option of signing up to the scheme or not. Let <italic>K</italic> = {1, &#x02026;, <italic>k</italic>} represent an entire day divided into <italic>k</italic> equal-length time slots, and <inline-formula id="pone.0227049.e008"><alternatives><graphic xlink:href="pone.0227049.e008.jpg" id="pone.0227049.e008g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M8"><mml:mrow><mml:msub><mml:mi>l</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mn>1</mml:mn></mml:msubsup><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>&#x02026;</mml:mo><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:msubsup><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> represent the vector of cooling loads of apartment <italic>i</italic> in all time slots in <italic>K</italic>. If at any point in time throughout the day, the cooling load of the block is not more than <italic>&#x003c8;</italic> kW, i.e., <inline-formula id="pone.0227049.e009"><alternatives><graphic xlink:href="pone.0227049.e009.jpg" id="pone.0227049.e009g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M9"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mo>;</mml:mo><mml:msub><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>N</mml:mi></mml:mrow></mml:msub><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02264;</mml:mo><mml:mi>&#x003c8;</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>, then those apartment that have signed up are charged at <italic>f</italic> &#x0003c; <italic>p</italic> per kWh of usage, and the rest are charged at <italic>p</italic> per kWh. The cooling load of an apartment <italic>i</italic> at time <italic>t</italic> is:
<disp-formula id="pone.0227049.e010"><alternatives><graphic xlink:href="pone.0227049.e010.jpg" id="pone.0227049.e010g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M10"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mi>P</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>&#x000d7;</mml:mo><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(3)</label></disp-formula>
where <italic>P</italic><sub><italic>i</italic></sub> is the electric power of the AC (in kW), and <inline-formula id="pone.0227049.e011"><alternatives><graphic xlink:href="pone.0227049.e011.jpg" id="pone.0227049.e011g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M11"><mml:mrow><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02208;</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>}</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> represents a <italic>cooling action</italic>, which is a binary variable that indicates whether or not air conditioning has been used at time <italic>t</italic>.</p><p>Since the discount is offered only when the whole block&#x02019;s load is below <italic>&#x003c8;</italic>, the price at which a coalition <italic>C</italic> &#x02286; <italic>N</italic> is charged is also influenced by the behaviour of the apartments in the same block that have not subscribed to the scheme, i.e., <italic>N</italic>&#x02216;<italic>C</italic>. In cooperative game theory terms, the value of the coalition in this case is influenced by the agents outside it. If those apartments could form other coalitions, then we would have a game with <italic>externalities</italic> (also known as a partition function game), which is a game where the value of a coalition depends on how other agents are structured [<xref rid="pone.0227049.ref026" ref-type="bibr">26</xref>]. However, since the discount scheme does not cater for other arrangements, the apartments that do not sign up cannot form any other coalitions. Therefore, we have a special case of externalities where the agents outside the coalition can only be structured as singletons, and the game is reduced to a characteristic function game.</p><p>Naturally, each apartment, whether signed up to the scheme or not, would want to optimise its use of the AC such that its internal temperature preferences are satisfied with minimal electricity consumption. In order to secure the discount, those apartments that do sign up need to coordinate their loads so that the aggregate load will be kept below the threshold and their internal temperatures remain as they individually deem comfortable. Clearly, if an apartment decides not to sign up, it can only optimise its load independently, without any coordination with other apartments.</p><p>Assuming that some of the <italic>n</italic> apartments form a coalition, <italic>C</italic>, and sign up to the scheme, the aggregate cooling load of all <italic>n</italic> apartments (in kW) at time <italic>t</italic> is given by:
<disp-formula id="pone.0227049.e012"><alternatives><graphic xlink:href="pone.0227049.e012.jpg" id="pone.0227049.e012g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M12"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>N</mml:mi><mml:mo>\</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives></disp-formula>
where <inline-formula id="pone.0227049.e013"><alternatives><graphic xlink:href="pone.0227049.e013.jpg" id="pone.0227049.e013g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M13"><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup></mml:math></alternatives></inline-formula> represents the aggregate optimal cooling load at time <italic>t</italic> of the apartments that have signed up, and <inline-formula id="pone.0227049.e014"><alternatives><graphic xlink:href="pone.0227049.e014.jpg" id="pone.0227049.e014g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M14"><mml:msubsup><mml:mi>l</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup></mml:math></alternatives></inline-formula> represents the optimal cooling of apartment <italic>i</italic>, at time <italic>t</italic>, which has not signed up.</p><p>Observe that a coalition can meet the threshold mostly through running its members&#x02019; ACs for longer periods (e.g., during off-peak times). Therefore, meeting the threshold potentially requires extra consumption of electricity, which would incur a higher cost. In theory, it is possible that the extra consumption becomes so high that even at the discounted rate the cost becomes higher than the sum of independent costs. This outcome is clearly not desirable, Therefore, if the discounted cost turns out to be higher, or if a feasible solution to the collective optimisation cannot be found, then the apartments optimise their loads independently. Based on this, we can write the optimal consumption of a coalition (measured in kWh) as:
<disp-formula id="pone.0227049.e015"><alternatives><graphic xlink:href="pone.0227049.e015.jpg" id="pone.0227049.e015g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M15"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>c</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mo>&#x000d7;</mml:mo><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:mstyle></mml:mtd><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mspace width="1.em"/><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="0.166667em"/><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi><mml:mspace width="0.166667em"/><mml:mi>f</mml:mi><mml:mo>&#x02264;</mml:mo><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:munder><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="0.166667em"/><mml:mi>p</mml:mi></mml:mrow></mml:mstyle></mml:mtd></mml:mtr><mml:mtr><mml:mtd/></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:munder><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mo>&#x000d7;</mml:mo><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:mstyle></mml:mtd><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mspace width="1.em"/><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="0.166667em"/><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi><mml:mspace width="0.166667em"/><mml:mi>f</mml:mi><mml:mo>&#x0003e;</mml:mo><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:munder><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mspace width="0.166667em"/><mml:mi>p</mml:mi></mml:mrow></mml:mstyle></mml:mtd></mml:mtr></mml:mtable><mml:mo/><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(4)</label></disp-formula>
where &#x00394;<italic>t</italic> is the duration of a time slot (in seconds). Based on the above consumption function, we now define the characteristic function, <italic>v</italic>, of the cooperative game (<italic>N</italic>, <italic>v</italic>) that represents the above discount scheme. In more detail, <italic>v</italic>(<italic>C</italic>) is equal to the total cost of consumption of its members. More formally, <italic>v</italic>(<italic>c</italic>) is given by:
<disp-formula id="pone.0227049.e016"><alternatives><graphic xlink:href="pone.0227049.e016.jpg" id="pone.0227049.e016g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M16"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>c</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>&#x000d7;</mml:mo><mml:mo>{</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>f</mml:mi></mml:mtd><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mspace width="0.277778em"/><mml:mo>;</mml:mo><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02264;</mml:mo><mml:mi>&#x003c8;</mml:mi></mml:mrow></mml:mstyle></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mi>p</mml:mi></mml:mstyle></mml:mtd><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mspace width="0.277778em"/><mml:mo>;</mml:mo><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x0003e;</mml:mo><mml:mi>&#x003c8;</mml:mi></mml:mrow></mml:mstyle></mml:mtd></mml:mtr></mml:mtable><mml:mo/></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(5)</label></disp-formula></p><p>With respect to the above characteristic function, it is clear that the apartments will not be worse off by joining the grand coalition. Therefore, it would be in the interest of all apartments to sign up and benefit from the potential discount.</p><p>In the next section, we explain how the cooling load of each apartment can be optimised so as to minimise the electricity consumption and satisfy its temperature preferences. We first present the model of thermal dynamics of an apartment that governs the evolution of its internal temperature.</p></sec><sec id="sec005"><title>Thermal dynamics of apartments</title><p>We use a standard thermal model in which heat is assumed to enter an apartment (by thermal conduction) at a rate that is proportional to the temperature difference between the cold air inside and the hot air outside [<xref rid="pone.0227049.ref027" ref-type="bibr">27</xref>&#x02013;<xref rid="pone.0227049.ref029" ref-type="bibr">29</xref>]. This model also incorporates the thermal capacity of the building structure, since through experimentation on real data collected from apartments in Jeddah, Saudi Arabia we found that this model best explains the observed data. This thermal model is represented as a set of coupled difference equations as per:
<disp-formula id="pone.0227049.e017"><alternatives><graphic xlink:href="pone.0227049.e017.jpg" id="pone.0227049.e017g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M17"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>-</mml:mo><mml:mi>r</mml:mi><mml:msup><mml:mi>&#x003b7;</mml:mi><mml:mi>t</mml:mi></mml:msup><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mi>&#x003b1;</mml:mi><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi><mml:mo>(</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>-</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>+</mml:mo><mml:mi>&#x003b2;</mml:mi><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi><mml:mo>(</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>-</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>)</mml:mo><mml:mo>+</mml:mo><mml:mi>&#x003b3;</mml:mi><mml:mo>&#x00394;</mml:mo><mml:mi>t</mml:mi><mml:mo>(</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>-</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>)</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(6)</label></disp-formula>
where <inline-formula id="pone.0227049.e018"><alternatives><graphic xlink:href="pone.0227049.e018.jpg" id="pone.0227049.e018g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M18"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02208;</mml:mo><mml:msup><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:math></alternatives></inline-formula> denotes the internal temperature (measured in &#x000b0;C) of apartment <italic>i</italic> at time <italic>t</italic>, <inline-formula id="pone.0227049.e019"><alternatives><graphic xlink:href="pone.0227049.e019.jpg" id="pone.0227049.e019g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M19"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02208;</mml:mo><mml:msup><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:math></alternatives></inline-formula> denotes the temperature of the building structure, or envelope, (measured in &#x000b0;C), and <inline-formula id="pone.0227049.e020"><alternatives><graphic xlink:href="pone.0227049.e020.jpg" id="pone.0227049.e020g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M20"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02208;</mml:mo><mml:msup><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:math></alternatives></inline-formula> denotes external temperature (measured in &#x000b0;C). We assume that <inline-formula id="pone.0227049.e021"><alternatives><graphic xlink:href="pone.0227049.e021.jpg" id="pone.0227049.e021g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M21"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> is the same for all apartments in <italic>N</italic>. Furthermore, <italic>r</italic> (measured in &#x000b0;C/hr) represents the rate at which the AC reduces the internal temperature, and <italic>&#x003b1;</italic>, <italic>&#x003b2;</italic> and <italic>&#x003b3;</italic> (measured in 1/hr) are the rates of leakage from the envelope to the inside, from the inside to the envelope, and from the outside to the envelope, respectively. Hereafter, when we refer to an apartment in a coalition we index the notation by <italic>i</italic>.</p><p>
<xref ref-type="disp-formula" rid="pone.0227049.e017">Eq (6)</xref> is the discrete equivalent to a set of coupled differential equations which has been used previously to model data collected from real buildings [<xref rid="pone.0227049.ref030" ref-type="bibr">30</xref>]. In this model, an envelope is introduced to act as an additional thermal mass to minimise internal temperature changes due to extremes of temperature outside. Given historical observations of <inline-formula id="pone.0227049.e022"><alternatives><graphic xlink:href="pone.0227049.e022.jpg" id="pone.0227049.e022g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M22"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> and <inline-formula id="pone.0227049.e023"><alternatives><graphic xlink:href="pone.0227049.e023.jpg" id="pone.0227049.e023g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M23"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula>, and the times during which the AC was on (which we collected from a number of apartments in Jeddah, Saudi Arabia) we predicted the evolution of the internal temperature, <inline-formula id="pone.0227049.e024"><alternatives><graphic xlink:href="pone.0227049.e024.jpg" id="pone.0227049.e024g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M24"><mml:msubsup><mml:mover><mml:mi>T</mml:mi><mml:mo>&#x000af;</mml:mo></mml:mover><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula>. The error in this prediction is given by <inline-formula id="pone.0227049.e025"><alternatives><graphic xlink:href="pone.0227049.e025.jpg" id="pone.0227049.e025g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M25"><mml:mrow><mml:msub><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:msub><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:msubsup><mml:mover><mml:mi>T</mml:mi><mml:mo>&#x000af;</mml:mo></mml:mover><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>-</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>)</mml:mo></mml:mrow><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>. Consequently, the best estimates of the parameters are those that minimise this error and can be learned through recursive least squares [<xref rid="pone.0227049.ref031" ref-type="bibr">31</xref>].</p></sec><sec id="sec006"><title>User comfort model</title><p>We outline a few assumptions that underpin the operation of the cooling system in an apartment. We assume that an apartment has a central air conditioning driven by a heat pump that transfers heat from a lower temperature heat source (the apartment) into a higher temperature heat sink (external ambient air). This system is connected to a thermostat within the apartment, where a user can set a desired temperature to be maintained, i.e., the setpoint temperature, denoted as <italic>T</italic><sub><italic>set</italic></sub> (&#x000b0;C).</p><p>The user in each apartment can specify the time interval during which &#x0201c;comfort&#x0201d; is desired. That is, the time slots when the user wants the internal temperature to be maintained at, or close to, <italic>T</italic><sub><italic>set</italic></sub>. We refer to this interval as the <italic>comfort period</italic>, and define it as: <italic>H</italic> = {<italic>t</italic> &#x02208; <italic>K</italic>|<italic>CST</italic> &#x02264; <italic>t</italic> &#x02264; <italic>CET</italic>}, where <italic>CST</italic> &#x02208; <italic>K</italic> and <italic>CET</italic> &#x02208; <italic>K</italic> are the comfort start time and comfort end time, respectively. A tolerance level is specified by the user to limit deviations of the internal temperature from the setpoint temperature, during the comfort period. We denote this tolerance by <inline-formula id="pone.0227049.e026"><alternatives><graphic xlink:href="pone.0227049.e026.jpg" id="pone.0227049.e026g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M26"><mml:mrow><mml:mi>&#x003b8;</mml:mi><mml:mo>&#x02208;</mml:mo><mml:msup><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:math></alternatives></inline-formula> (&#x000b0;C). Note that lower values of <italic>T</italic><sub><italic>set</italic></sub> suggest that a user feels more comfortable at lower temperatures, and smaller values of <italic>&#x003b8;</italic> indicate that a user is sensitive to deviations of the temperature from the setpoint.</p><p>Intrinsically, the above preferences have an impact on the cooling load (<xref ref-type="disp-formula" rid="pone.0227049.e010">Eq (3)</xref>). <xref ref-type="fig" rid="pone.0227049.g001">Fig 1</xref> shows the effect of varying <italic>T</italic><sub><italic>set</italic></sub>, <italic>&#x003b8;</italic> and <italic>&#x003b3;</italic> on the temperature and cooling profiles. The bottom of each subplot shows the cooling actions over the course of a day. As <italic>T</italic><sub><italic>set</italic></sub> is lowered, the amount of cooling required increases proportionately to achieve lower temperatures. As can be seen in the corresponding plots in <xref ref-type="fig" rid="pone.0227049.g001">Fig 1</xref>, more cooling is required when <italic>T</italic><sub><italic>set</italic></sub> = 21&#x000b0;C than internal temperature profile in an apartment when <italic>T</italic><sub><italic>set</italic></sub> equals 21&#x000b0;C <italic>T</italic><sub><italic>set</italic></sub> = 23&#x000b0;C. The total time when the AC is on is 52% less in the latter case. Similarly, when <italic>&#x003b8;</italic> is small, a user is more sensitive to deviations of the internal temperature from <italic>T</italic><sub><italic>set</italic></sub>. Consequently, the AC is turned on for longer to ensure that the deviation of the internal temperature from <italic>T</italic><sub><italic>set</italic></sub> lies within the tolerance level, resulting in higher energy consumption. This is evident in <xref ref-type="fig" rid="pone.0227049.g001">Fig 1</xref>, where the <italic>&#x003b8;</italic> is set to 0.6&#x000b0;C and 1.5&#x000b0;C. As can be seen, more cooling is required for a larger <italic>&#x003b8;</italic>. The total time when the AC is on is 12% less in the former case. Furthermore, as per <xref ref-type="disp-formula" rid="pone.0227049.e017">Eq (6)</xref>, an apartment that is well-insulated will have a small <italic>&#x003b3;</italic> value, whereas a leaky apartment will have a high value. This observation is of interest as more cooling is required to maintain a leaky apartment at a certain temperature. This effect is evident in <xref ref-type="fig" rid="pone.0227049.g001">Fig 1</xref>, where the value of <italic>&#x003b3;</italic> used to generate the plots are 0.36 1/hr and 0.48 1/hr, respectively. The total amount of time when the AC is on is 24% more for <italic>&#x003b3;</italic> = 0.48.</p><fig id="pone.0227049.g001" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.g001</object-id><label>Fig 1</label><caption><title>The impact of varying <italic>T</italic><sub><italic>set</italic></sub>, <italic>&#x003b8;</italic> and <italic>&#x003b3;</italic> on the temperature and cooling profiles.</title></caption><graphic xlink:href="pone.0227049.g001"/></fig></sec><sec id="sec007"><title>Independent optimisation of loads</title><p>Having introduced the comfort model, we describe how an apartment optimises its use of the AC so as to satisfy only its own comfort preferences. In summary, as we described in section user comfort model, the preferences of an apartment are: (i) the desired setpoint temperature, denoted by <italic>T</italic><sub><italic>set</italic></sub>, (ii) a tolerance level on the deviation of the internal temperature from the setpoint, denoted by <inline-formula id="pone.0227049.e027"><alternatives><graphic xlink:href="pone.0227049.e027.jpg" id="pone.0227049.e027g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M27"><mml:mrow><mml:mi>&#x003b8;</mml:mi><mml:mo>&#x02208;</mml:mo><mml:msup><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>, and (iii) the comfort start time (<italic>CST</italic>) and comfort end time (<italic>CET</italic>) which determine <italic>H</italic>&#x02014;the set of time slots representing the comfort period. Based on these, we define an optimal cooling plan for apartment <italic>i</italic> to be a vector of cooling actions [<italic>&#x003b7;</italic><sup>1</sup>
<italic>&#x003b7;</italic><sup>2</sup>&#x02026;<italic>&#x003b7;</italic><sup><italic>k</italic></sup>], that result in meeting the above preferences as well as the following requirements: (i) the overall energy consumption is minimised, i.e., all constraints are satisfied with the AC running in as few time slots as possible, (ii) the internal and envelope temperatures at the start and end of the day converge. Note that the latter requirement is to ensure that the cooling plan is optimised over an infinite horizon, which prevents erroneous solutions that minimise AC use in the short term, but require additional cooling later, as would be the case if a finite planning horizon were used. Given the above preferences and requirements, the optimal cooling load of an apartment throughout the day can be computed as per <xref ref-type="disp-formula" rid="pone.0227049.e010">Eq (3)</xref> using <italic>&#x003b7;</italic><sup>1</sup>, <italic>&#x003b7;</italic><sup>2</sup>, &#x02026;, <italic>&#x003b7;</italic><sup><italic>k</italic></sup> found by solving the following optimisation problem:
<disp-formula id="pone.0227049.e028"><alternatives><graphic xlink:href="pone.0227049.e028.jpg" id="pone.0227049.e028g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M28"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd/><mml:mtd columnalign="left"><mml:mrow><mml:mtext>minimise</mml:mtext><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msup><mml:mi>&#x003b7;</mml:mi><mml:mi>t</mml:mi></mml:msup></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd/><mml:mtd columnalign="left"><mml:mrow><mml:mrow><mml:mtext>subject</mml:mtext><mml:mspace width="4.pt"/><mml:mtext>to</mml:mtext><mml:mspace width="0.277778em"/><mml:mo>&#x02200;</mml:mo><mml:mi>h</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>H</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.277778em"/><mml:mspace width="0.277778em"/><mml:mo>|</mml:mo></mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>h</mml:mi></mml:msubsup><mml:mo>-</mml:mo><mml:msub><mml:mi>T</mml:mi><mml:mrow><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>|</mml:mo><mml:mo>&#x02264;</mml:mo><mml:mi>&#x003b8;</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mtext>and</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd/><mml:mtd columnalign="left"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msubsup><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>k</mml:mi></mml:msubsup><mml:mspace width="0.277778em"/><mml:mo>,</mml:mo><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msubsup><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>k</mml:mi></mml:msubsup><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(7)</label></disp-formula></p><p>Observe that our formulation avoids the explicit trade-off between consumption and comfort within a single objective function, which is dependent on specifying appropriate weights for both objectives. This is because, in practice, there is no principled way to specify such weights [<xref rid="pone.0227049.ref032" ref-type="bibr">32</xref>].</p></sec><sec id="sec008"><title>Collective optimisation of loads</title><p>We now describe how a coalition of apartments, <italic>C</italic>, collectively optimise their cooling loads. Similar to the single apartment case, the user in each apartment in <italic>C</italic> specifies their individual cooling preferences. These include their desired setpoint temperature, <italic>T</italic><sub><italic>set</italic></sub>[<italic>i</italic>], their tolerance on the deviation of the internal temperature during the comfort period, <italic>&#x003b8;</italic><sub><italic>i</italic></sub>, and their comfort start and end times which determine <italic>H</italic><sub><italic>i</italic></sub>. In finding an optimal cooling plan for the coalition, we introduce a key additional constraint, which ensures that at all times, the total load of all apartments in the coalition, plus the total load of the apartments who optimise their loads independently, is less than or equal to <italic>&#x003c8;</italic>. More formally, the vector of optimal cooling actions, <inline-formula id="pone.0227049.e029"><alternatives><graphic xlink:href="pone.0227049.e029.jpg" id="pone.0227049.e029g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M29"><mml:mrow><mml:mo>[</mml:mo><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mn>1</mml:mn></mml:msubsup><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>&#x02026;</mml:mo><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:msubsup><mml:mo>]</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>, for every apartment <italic>i</italic> &#x02208; <italic>C</italic> is given by the following optimisation problem:
<disp-formula id="pone.0227049.e030"><alternatives><graphic xlink:href="pone.0227049.e030.jpg" id="pone.0227049.e030g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M30"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>C</mml:mi><mml:mspace width="0.277778em"/><mml:mspace width="0.166667em"/></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mtext>minimise</mml:mtext><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mspace width="0.277778em"/><mml:mtext>subject</mml:mtext><mml:mspace width="4.pt"/><mml:mtext>to:</mml:mtext></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd/><mml:mtd columnalign="left"><mml:mrow><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>h</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>H</mml:mi><mml:mspace width="0.277778em"/><mml:mspace width="0.277778em"/><mml:mo>|</mml:mo></mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>h</mml:mi></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>-</mml:mo><mml:msub><mml:mi>T</mml:mi><mml:mrow><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>|</mml:mo><mml:mo>&#x02264;</mml:mo></mml:mrow><mml:msub><mml:mi>&#x003b8;</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mtext>and</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd/><mml:mtd columnalign="left"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mspace width="0.277778em"/><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>P</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mspace width="0.166667em"/><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>+</mml:mo><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>N</mml:mi><mml:mo>\</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>j</mml:mi><mml:mrow><mml:mo>*</mml:mo><mml:mi>t</mml:mi></mml:mrow></mml:msubsup><mml:mo>&#x02264;</mml:mo><mml:mi>&#x003c8;</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mtext>and</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd/><mml:mtd columnalign="left"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>k</mml:mi></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mspace width="0.277778em"/><mml:mo>,</mml:mo><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>k</mml:mi></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(8)</label></disp-formula></p><p>If a feasible solution to the above optimisation did not exist, the apartments would optimise their loads individually as per <xref ref-type="disp-formula" rid="pone.0227049.e028">Eq (7)</xref>. Note that it is possible for an individual apartment in <italic>C</italic> to have a significant impact on the feasibility of <italic>C</italic> satisfying the threshold constraint. For instance, if <italic>T</italic><sub><italic>set</italic></sub>[<italic>i</italic>] is set to a particularly low temperature, or <italic>&#x003b8;</italic><sub><italic>i</italic></sub> is particularly small, the corresponding energy consumption in that apartment will be greater, which in turn increases the likelihood of the aggregate load exceeding the threshold. As the individual apartments become more flexible and less stringent with their preferences, the aggregate cooling load, <inline-formula id="pone.0227049.e031"><alternatives><graphic xlink:href="pone.0227049.e031.jpg" id="pone.0227049.e031g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M31"><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula>, is more likely to satisfy the constraint on the threshold.</p></sec><sec id="sec009"><title>An example with three apartments</title><p>Having established the theoretical underpinnings of how cooling loads are independently and collectively optimised, we now illustrate how they work in practice through a simple example. Consider a 3-player game (<italic>N</italic> = {1, 2, 3}), where a block consists of three apartments. All three apartments agree to participate in the discount scheme. Apartment 1 desires that the temperature be maintained at 21&#x000b0;C (<italic>T</italic><sub><italic>set</italic></sub>[1] = 21&#x000b0;C) for 6 hours from <italic>CST</italic> = 10:00 to <italic>CET</italic> = 16:00, and is satisfied with wide swings of temperature (<italic>&#x003b8;</italic><sub>1</sub> = 1.5&#x000b0;C). Apartment 2 desires the temperature to be at 22&#x000b0;C (<italic>T</italic><sub><italic>set</italic></sub>[1] = 22&#x000b0;C) for 8 hours from <italic>CST</italic> = 09:00 to <italic>CET</italic> = 17:00, and has very strict preferences over temperature (<italic>&#x003b8;</italic><sub>2</sub> = 0.5&#x000b0;C). Apartment 3 too desires the temperature to be at 21&#x000b0;C (<italic>T</italic><sub><italic>set</italic></sub> [3] = 21&#x000b0;C) from <italic>CST</italic> = 10:00 to <italic>CET</italic> = 16:00, and is satisfied with wide swings of temperature (<italic>&#x003b8;</italic><sub>1</sub> = 1.5&#x000b0;C).</p><p>We assume that the AC in each apartment operates on a 10-minute cycle, i.e., a cooling decision is made for each 10-minute interval in a day (&#x00394;<italic>t</italic> = 600s). As a result, <italic>K</italic> = [1, &#x02026;, 144] and the decision variable is <inline-formula id="pone.0227049.e032"><alternatives><graphic xlink:href="pone.0227049.e032.jpg" id="pone.0227049.e032g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M32"><mml:mrow><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>, &#x02200;<italic>t</italic> &#x02208; <italic>K</italic>. We also assume that the ACs in all three apartments are similar and consume at a rate of 3 kW when on, i.e. <italic>P</italic><sub><italic>i</italic></sub> = 3 kW. Hence, the total possible energy load of all three apartments if they optimise their loads independently is 9 kW. Now, when the apartments participate in the scheme, a threshold at 3 kW (i.e., a <inline-formula id="pone.0227049.e033"><alternatives><graphic xlink:href="pone.0227049.e033.jpg" id="pone.0227049.e033g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M33"><mml:mfrac><mml:mn>2</mml:mn><mml:mn>3</mml:mn></mml:mfrac></mml:math></alternatives></inline-formula> reduction), is set on their total load.</p><p>We first consider the case where all 3 apartments optimise their cooling loads independently. The bottom of plots in <xref ref-type="fig" rid="pone.0227049.g002">Fig 2</xref> show the individual cooling profiles of each apartment for a single day. Each profile is obtained by solving the optimisation problem in <xref ref-type="disp-formula" rid="pone.0227049.e028">Eq (7)</xref> using CPLEX, to yield <inline-formula id="pone.0227049.e034"><alternatives><graphic xlink:href="pone.0227049.e034.jpg" id="pone.0227049.e034g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M34"><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> (&#x02200;<italic>t</italic> &#x02208; <italic>K</italic>). Also shown in <xref ref-type="fig" rid="pone.0227049.g003">Fig 3</xref> are the corresponding internal temperature profiles, which are estimated by iterating <xref ref-type="disp-formula" rid="pone.0227049.e017">Eq (6)</xref> for each apartment, using the cooling actions, <inline-formula id="pone.0227049.e035"><alternatives><graphic xlink:href="pone.0227049.e035.jpg" id="pone.0227049.e035g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M35"><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> as inputs. It is evident from the plot that the internal temperature is within the desired setpoint deviation tolerance at times when the users desire cooling. Also, this deviation is greater in Apartment 1 and 2, as they are less sensitive to large swings in temperature. Finally, the optimisation ensures that the temperature at the start and end of each day is the same, as required.</p><fig id="pone.0227049.g002" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.g002</object-id><label>Fig 2</label><caption><title>The temperature and cooling profiles when loads are optimised individually.</title></caption><graphic xlink:href="pone.0227049.g002"/></fig><fig id="pone.0227049.g003" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.g003</object-id><label>Fig 3</label><caption><title>The temperature and cooling profiles when loads are optimised collectively.</title></caption><graphic xlink:href="pone.0227049.g003"/></fig><p>Next, we consider the case where all 3 apartments form a coalition and collectively optimise their loads to ensure that their aggregate load does not exceed the threshold. The bottom of plots in <xref ref-type="fig" rid="pone.0227049.g003">Fig 3</xref> show the cooling profiles of each apartment for a single day. Each profile is obtained by solving the optimisation problem in <xref ref-type="disp-formula" rid="pone.0227049.e030">Eq (8)</xref> using CPLEX, to yield <inline-formula id="pone.0227049.e036"><alternatives><graphic xlink:href="pone.0227049.e036.jpg" id="pone.0227049.e036g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M36"><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> (&#x02200;<italic>t</italic> &#x02208; <italic>K</italic>), which in turn generate a temperature profile based on the thermal model as per <xref ref-type="disp-formula" rid="pone.0227049.e017">Eq (6)</xref>.</p><p>More importantly, as shown in <xref ref-type="fig" rid="pone.0227049.g004">Fig 4</xref>, the collective optimisation results in the aggregate never exceeding the threshold during the day, making the block eligible for the discount. This is not the case when optimised independently.</p><fig id="pone.0227049.g004" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.g004</object-id><label>Fig 4</label><caption><title>Total load when loads are optimised individually and collectively.</title></caption><graphic xlink:href="pone.0227049.g004"/></fig><p>Since optimising the loads of the three apartments is tractable, we can readily divide the total cost of the apartments based on the Shapley value as per <xref ref-type="disp-formula" rid="pone.0227049.e003">Eq (1b)</xref>. We assume that the electricity cost is $0.15 per kWh when apartments optimise their cooling loads independently. As per the discount scheme, if they ensure that their aggregate load does not exceed 3 kW, then the electricity cost will be reduced to $0.08 per kWh.</p><p>When optimised collectively to keep the aggregate load below the threshold, Apartment 2&#x02019;s preferences are so strict that a somewhat small change is only possible. However, Apartment 1 and Apartment 3 are able to shift their cooling loads to satisfy their preferences as well as the threshold constraint, but to do so, they have to run their AC earlier and longer. These are naturally reflected in the value of each coalition as shown in <xref rid="pone.0227049.t001" ref-type="table">Table 1</xref>. As can be seen, all apartments would incur the same cost if they did not participate in the scheme. However, when they do participate, interestingly, Apartment 2&#x02019;s share of the discount becomes slightly less than that of the other two. This is due to its stricter preferences that are harder to satisfy in the collective optimisation. Also note that the optimal loads of Apartment 1 and Apartment 3, who have identical preferences, are the same. Therefore, all of their marginal contributions (and their Shapley values, in turn) are equal. Based on the coalition values given in the table and the Shapley value formula (<xref ref-type="disp-formula" rid="pone.0227049.e003">Eq 1b</xref>), the payments of apartments 1, 2 and 3, are $3.08, $3.20 and $3.08, respectively.</p><table-wrap id="pone.0227049.t001" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.t001</object-id><label>Table 1</label><caption><title>The cost of coalitions when members optimise their loads collectively and independently.</title></caption><alternatives><graphic id="pone.0227049.t001g" xlink:href="pone.0227049.t001"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><thead><tr><th align="center" style="border-top:thick" rowspan="1" colspan="1">Coalition (<italic>C</italic>)</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">Threshold</th><th align="center" style="border-top:thick;border-right:thick" rowspan="1" colspan="1">Cost</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">Independent Apartments (<italic>N</italic>&#x02216;<italic>C</italic>)</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">Cost</th></tr></thead><tbody><tr><td align="center" rowspan="1" colspan="1">{}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$0</td><td align="center" rowspan="1" colspan="1">{1},{2},{3}</td><td align="center" rowspan="1" colspan="1">$17.55</td></tr><tr><td align="center" rowspan="1" colspan="1">{1}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$5.85</td><td align="center" rowspan="1" colspan="1">{2}, {3}</td><td align="center" rowspan="1" colspan="1">$11.70</td></tr><tr><td align="center" rowspan="1" colspan="1">{2}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$5.85</td><td align="center" rowspan="1" colspan="1">{1}, {3}</td><td align="center" rowspan="1" colspan="1">$11.70</td></tr><tr><td align="center" rowspan="1" colspan="1">{3}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$5.85</td><td align="center" rowspan="1" colspan="1">{1}, {2}</td><td align="center" rowspan="1" colspan="1">$11.70</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2}</td><td align="center" rowspan="1" colspan="1">Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$6.24</td><td align="center" rowspan="1" colspan="1">{3}</td><td align="center" rowspan="1" colspan="1">$5.85</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 3}</td><td align="center" rowspan="1" colspan="1">Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$6.00</td><td align="center" rowspan="1" colspan="1">{2}</td><td align="center" rowspan="1" colspan="1">$5.85</td></tr><tr><td align="center" rowspan="1" colspan="1">{2, 3}</td><td align="center" rowspan="1" colspan="1">Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$6.24</td><td align="center" rowspan="1" colspan="1">{1}</td><td align="center" rowspan="1" colspan="1">$5.85</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2, 3}</td><td align="center" rowspan="1" colspan="1">Satisfied</td><td align="center" style="border-right:thick" rowspan="1" colspan="1">$9.36</td><td align="center" rowspan="1" colspan="1">{}</td><td align="center" rowspan="1" colspan="1">$0</td></tr></tbody></table></alternatives></table-wrap></sec><sec id="sec010"><title>Computationally efficient optimisation of loads</title><p>In the simple example of three apartments, optimising the cooling loads did not require a considerable amount of computation, and calculating the Shapley value was easy. However, as more apartments are added to the game, satisfying the constraints takes considerably more time. Considering the fact that, in calculating the Shapley value, an exponential number of coalitions must be optimised, the time it takes to calculate the payoff of only a few agents can be very long. In order to overcome this, we next present two greedy algorithms, namely, iOPT and cOPT, for optimising the cooling load of the apartments independently and collectively. Due to the difficulty of finding the optimal solutions in reasonable time, we use these algorithms and trade off optimality for computation speed. Thus, we consider a feasible cooling plan given by these algorithms to be the best solution we can find given our limited computational resources, which may or may not coincide with the actual optimal solution. Given this, we call such a solution <italic>best-found</italic>.</p><p><bold>Algorithm 1</bold> Greedy Algorithm For Optimising Apartments Independently</p><p specific-use="line"><bold>function</bold> iOPT (<italic>T</italic><sub><italic>set</italic></sub>, <italic>&#x003b8;</italic>, <italic>T</italic><sub><italic>ext</italic></sub>, &#x0039b;, <italic>maxIterations</italic>)</p><p specific-use="line"><italic>&#x003b7;</italic> &#x02190; []</p><p specific-use="line"><bold>for</bold>
<italic>iteration</italic> = 1 to <italic>maxIterations</italic>
<bold>do</bold></p><p specific-use="line">&#x02003;<italic>bestTime</italic> &#x02190; &#x02212;1</p><p specific-use="line">&#x02003;<italic>minDiscomfort</italic> &#x02190; &#x0221e;</p><p specific-use="line">&#x02003;<italic>maxDeviation</italic> &#x02190; 0</p><p specific-use="line">&#x02003;<bold>for</bold>
<italic>t</italic> = 0 to <italic>k</italic>
<bold>do</bold></p><p specific-use="line">&#x02003;&#x02003;<bold>if</bold>
<italic>t</italic> &#x02208; &#x0039b; <bold>then</bold></p><p specific-use="line">&#x02003;&#x02003;&#x02003;<bold>continue</bold></p><p specific-use="line">&#x02003;&#x02003;<bold>end if</bold></p><p specific-use="line">&#x02003;&#x02003;<italic>&#x003b7;</italic><sub><italic>test</italic></sub> &#x02190; <italic>&#x003b7;</italic></p><p specific-use="line">&#x02003;&#x02003;
<inline-formula id="pone.0227049.e037"><alternatives><graphic xlink:href="pone.0227049.e037.jpg" id="pone.0227049.e037g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M37"><mml:mrow><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02190;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
</p><p specific-use="line">&#x02003;&#x02003;&#x02200;<italic>t</italic> &#x02208; <italic>K</italic> update <inline-formula id="pone.0227049.e038"><alternatives><graphic xlink:href="pone.0227049.e038.jpg" id="pone.0227049.e038g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M38"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> and <inline-formula id="pone.0227049.e039"><alternatives><graphic xlink:href="pone.0227049.e039.jpg" id="pone.0227049.e039g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M39"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>s</mml:mi><mml:mi>t</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula> as per <xref ref-type="disp-formula" rid="pone.0227049.e017">Eq (6)</xref></p><p specific-use="line">&#x02003;&#x02003;Calculate &#x00394;<italic>D</italic><sub><italic>test</italic></sub></p><p specific-use="line">&#x02003;&#x02003;<bold>if</bold> &#x00394;<italic>D</italic><sub><italic>test</italic></sub> &#x0003c; <italic>minDiscomfort</italic>
<bold>then</bold></p><p specific-use="line">&#x02003;&#x02003;&#x02003;<italic>bestTime</italic> &#x02190; <italic>t</italic></p><p specific-use="line">&#x02003;&#x02003;&#x02003;<italic>minDiscomfort</italic> &#x02190; &#x00394;<italic>D</italic><sub><italic>test</italic></sub></p><p specific-use="line">&#x02003;&#x02003;<bold>end if</bold></p><p specific-use="line">&#x02003;<bold>end for</bold></p><p specific-use="line">&#x02003;<bold>if</bold>
<italic>bestTime</italic> &#x0003e; &#x02212;1 <bold>then</bold></p><p specific-use="line">&#x02003;&#x02003;<italic>&#x003b7;</italic><sup><italic>bestTime</italic></sup> &#x02190; 1</p><p specific-use="line">&#x02003;&#x02003;&#x02200;<italic>t</italic> &#x02208; <italic>K</italic> update <inline-formula id="pone.0227049.e040"><alternatives><graphic xlink:href="pone.0227049.e040.jpg" id="pone.0227049.e040g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M40"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> and <inline-formula id="pone.0227049.e041"><alternatives><graphic xlink:href="pone.0227049.e041.jpg" id="pone.0227049.e041g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M41"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula></p><p specific-use="line">&#x02003;<bold>end if</bold></p><p specific-use="line"><bold>end for</bold></p><p specific-use="line"><bold>return</bold>
<italic>maxDeviation</italic> &#x02264; <italic>&#x003b8;</italic></p><p>First, we explain the workings of iOPT, the pseudocode of which is presented in Algorithm 1. Using a heuristic, iOPT searches for a set of cooling actions that satisfy the constraints of an individual apartment as per <xref ref-type="disp-formula" rid="pone.0227049.e028">Eq (7)</xref>. This heuristic, which we call the <italic>discomfort</italic> of an apartment, represents the discrepancy between an apartment&#x02019;s preferences (as outlined in section <xref ref-type="sec" rid="sec006">user comfort model</xref>) and the temperature profile resulting from a cooling plan found by the algorithm. More formally, the discomfort of apartment <italic>i</italic>, denoted by &#x00394;<italic>D</italic><sub><italic>i</italic></sub>, is the largest deviation of the internal temperature from the setpoint temperature during the comfort period. This is given as:
<disp-formula id="pone.0227049.e042"><alternatives><graphic xlink:href="pone.0227049.e042.jpg" id="pone.0227049.e042g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M42"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo>&#x00394;</mml:mo><mml:msub><mml:mi>D</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:munder><mml:mo form="prefix" movablelimits="true">max</mml:mo><mml:mrow><mml:mi>h</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>H</mml:mi></mml:mrow></mml:munder><mml:mspace width="0.166667em"/><mml:mrow><mml:mo>(</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>h</mml:mi></mml:msubsup><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>-</mml:mo><mml:msub><mml:mi>T</mml:mi><mml:mrow><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(9)</label></disp-formula></p><p>The algorithm incrementally finds the time slots where switching the AC on results in the largest discomfort reduction. Initially, the AC is off in all time slots (i.e., <inline-formula id="pone.0227049.e043"><alternatives><graphic xlink:href="pone.0227049.e043.jpg" id="pone.0227049.e043g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M43"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mo>,</mml:mo><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>), and is then switched on only if it results in a reduction of the discomfort. This way, in addition to searching for a feasible solution, the consumption is also minimised (as required in the optimisation problem in <xref ref-type="disp-formula" rid="pone.0227049.e028">Eq (7)</xref>). However, as soon as the constraints of the apartment are satisfied, the algorithm will not seek to minimise the consumption further. Since this procedure is indepedent of the number of apartments, the time complexity of the algorithm is constant. To be more exact, it is a function of |<italic>K</italic>|<sup>2</sup>, which implies even with finer time resolutions the computation will increase very reasonably. Similarly, the space complexity of iOPT is independent of <italic>n</italic>, and is only a multiple of |<italic>K</italic>|, which is also constant.</p><p>Furthermore, recall that one of the constraints in <xref ref-type="disp-formula" rid="pone.0227049.e028">Eq (7)</xref> is that the internal and envelope temperatures at the start and end of the day should converge (i.e., <inline-formula id="pone.0227049.e044"><alternatives><graphic xlink:href="pone.0227049.e044.jpg" id="pone.0227049.e044g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M44"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msubsup><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>k</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula> and <inline-formula id="pone.0227049.e045"><alternatives><graphic xlink:href="pone.0227049.e045.jpg" id="pone.0227049.e045g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M45"><mml:mrow><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msubsup><mml:mo>=</mml:mo><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>v</mml:mi></mml:mrow><mml:mi>k</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>). To ensure this, one can run Algorithm 1 repeatedly, and in each iteration calculate <inline-formula id="pone.0227049.e046"><alternatives><graphic xlink:href="pone.0227049.e046.jpg" id="pone.0227049.e046g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M46"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msubsup></mml:math></alternatives></inline-formula> based on <inline-formula id="pone.0227049.e047"><alternatives><graphic xlink:href="pone.0227049.e047.jpg" id="pone.0227049.e047g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M47"><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mi>k</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> from the previous iteration. We have found through experiments that, this way, no more than 4 iterations are typically needed for the internal and envelope temperatures at the end of the day to be within 0.1&#x000b0;C of the start of the day. Moreover, if iOPT does not find a feasible solution, the algorithm will terminate after <italic>maxIterations</italic> iterations. Lastly, iOPT takes a set of time slots &#x0039b; as input, which, as we explain later, is used in cOPT to indicate the time slots in which the aggregate load is greater or equal to the threshold. When an apartment is optimised independently, this set is empty.</p><p>If iOPT finds a feasible solution for apartment <italic>i</italic>, it gives a vector of <inline-formula id="pone.0227049.e048"><alternatives><graphic xlink:href="pone.0227049.e048.jpg" id="pone.0227049.e048g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M48"><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:msubsup></mml:math></alternatives></inline-formula> values, based on which we calculate the best-found cooling load of the apartment when is independent of the coalition. This load is then used to calculate the consumption of apartment <italic>i</italic> as per <xref ref-type="disp-formula" rid="pone.0227049.e015">Eq (4)</xref>, based on which we obtain the bounded rational value of the singleton {<italic>i</italic>}, i.e., <italic>v</italic><sup><italic>BR</italic></sup>({<italic>i</italic>}). Next, we describe the workings of cOPT, which optimises the cooling load of the members of a coalition. The pseudocode is given in Algorithm 2.</p><p><bold>Algorithm 2</bold> Algorithm For Optimising Apartments Collectively</p><p specific-use="line"><bold>function</bold> cOPT (<italic>C</italic>, <italic>N</italic>, <italic>&#x003c8;</italic>, <italic>T</italic><sub><italic>set</italic></sub>, <italic>&#x003b8;</italic>, <italic>T</italic><sub><italic>ext</italic></sub>, <italic>maxIterations</italic>)</p><p specific-use="line"><bold>for all</bold>
<italic>i</italic> &#x02208; <italic>N</italic>
<bold>do</bold></p><p specific-use="line">&#x02003;iOPT(<italic>T</italic><sub><italic>set</italic></sub>[<italic>i</italic>], <italic>&#x003b8;</italic><sub><italic>i</italic></sub>, <italic>T</italic><sub><italic>ext</italic></sub>, &#x02205;, <italic>maxIterations</italic>)</p><p specific-use="line"><bold>end for</bold></p><p specific-use="line"><bold>if</bold>
<inline-formula id="pone.0227049.e049"><alternatives><graphic xlink:href="pone.0227049.e049.jpg" id="pone.0227049.e049g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M49"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02264;</mml:mo><mml:mi>&#x003c8;</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
<bold>then</bold></p><p specific-use="line">&#x02003;<bold>return</bold> true</p><p specific-use="line"><bold>end if</bold></p><p specific-use="line">// <italic>C</italic> is sorted beforehand based on <xref ref-type="disp-formula" rid="pone.0227049.e053">Eq (10)</xref></p><p specific-use="line"><bold>for all</bold>
<italic>i</italic> &#x02208; <italic>C</italic>
<bold>do</bold></p><p specific-use="line">&#x02003;
<inline-formula id="pone.0227049.e050"><alternatives><graphic xlink:href="pone.0227049.e050.jpg" id="pone.0227049.e050g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M50"><mml:mrow><mml:mo>&#x0039b;</mml:mo><mml:mo>&#x02190;</mml:mo><mml:mo>{</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mo>|</mml:mo><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02265;</mml:mo><mml:mi>&#x003c8;</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
</p><p specific-use="line">&#x02003;<italic>successfullyReOptimised</italic>&#x02190; iOPT (<italic>T</italic><sub><italic>set</italic></sub>[<italic>i</italic>], <italic>&#x003b8;</italic><sub><italic>i</italic></sub>, <italic>T</italic><sub><italic>ext</italic></sub>, &#x0039b;, <italic>maxIterations</italic>)</p><p specific-use="line">&#x02003;<bold>if</bold>
<italic>successfullyReOptimised</italic>
<bold>then</bold></p><p specific-use="line">&#x02003;&#x02003;<bold>if</bold>
<inline-formula id="pone.0227049.e051"><alternatives><graphic xlink:href="pone.0227049.e051.jpg" id="pone.0227049.e051g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M51"><mml:mrow><mml:mo>&#x02200;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mspace width="0.277778em"/><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02264;</mml:mo><mml:mi>&#x003c8;</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
<bold>then</bold></p><p specific-use="line">&#x02003;&#x02003;&#x02003;<bold>return</bold>
<italic>true</italic></p><p specific-use="line">&#x02003;&#x02003;<bold>end if</bold></p><p specific-use="line">&#x02003;<bold>else</bold></p><p specific-use="line">&#x02003;&#x02003;Revert <italic>i</italic> to its individually optimised state</p><p specific-use="line">&#x02003;<bold>end if</bold></p><p specific-use="line"><bold>end for</bold></p><p specific-use="line"><bold>return</bold>
<italic>false</italic></p><p>Given a coalition, all member apartments are first independently optimised using iOPT. If by doing so the constraints of all apartments, as well as the threshold constraint are already satisfied, then the best-found cooling plan of the members of the coalition, in this case, is the same as when the apartments optimise their loads independently. However, if the threshold is not satisfied, it means that at least in one time slot there is congestion, i.e., the aggregate load is higher than the threshold. We denote the set of <italic>congested time slots</italic> by &#x0039b;, which is formally defined as: <inline-formula id="pone.0227049.e052"><alternatives><graphic xlink:href="pone.0227049.e052.jpg" id="pone.0227049.e052g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M52"><mml:mrow><mml:mo>{</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>K</mml:mi><mml:mo>|</mml:mo><mml:msubsup><mml:mi>l</mml:mi><mml:mi>N</mml:mi><mml:mi>t</mml:mi></mml:msubsup><mml:mo>&#x02265;</mml:mo><mml:mi>&#x003c8;</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. The objective of the algorithm is to <italic>decongest</italic> these time slots by <italic>re-optimising</italic> at least some of the apartments such that they do not run their ACs in these time slots. Re-optimising an apartment given a set of congested time slots means that after all apartments are initially independently optimised, the apartment in question is again optimised using iOPT, such that its AC is not turned on in any of the congested time slots. Obviously, those members of the coalition that are stringent with their temperature preferences may not be able to avoid the congested time slots. As such, the algorithm performs decongestion with respect to the flexibility of the load of the apartments. The idea is that the more flexible an apartment is, the more likely it can satisfy its constraints without having to run its AC in the congested time slots. Observe that the longer the comfort period is, the more cooling is needed. Furthermore, as we saw in <xref ref-type="fig" rid="pone.0227049.g001">Fig 1</xref>, the higher the tolerance on the setpoint temperature of an apartment is, the less cooling it requires, and thus, it can be considered more flexible than an apartment that has a lower tolerance. Based on these observations, we use the following ratio as a heuristic to determine the severity of the preferences of the apartments relative to one another:
<disp-formula id="pone.0227049.e053"><alternatives><graphic xlink:href="pone.0227049.e053.jpg" id="pone.0227049.e053g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M53"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mfrac><mml:msub><mml:mi>&#x003b8;</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:msub><mml:mi>P</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>&#x000d7;</mml:mo><mml:mrow><mml:mo>|</mml:mo><mml:msub><mml:mi>H</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(10)</label></disp-formula></p><p>Using the above heuristic, we initially sort the apartments in the coalition in ascending order, so that the least flexible apartment is dealt with first. Given a set of congested time slots, cOPT iteratively re-optimises the apartments using iOPT. In each iteration, the set of congested time slots, &#x0039b;, is computed anew. If &#x0039b; is not empty (i.e, the threshold constraint has not been satisfied yet), iOPT will be called again to optimise the apartment in the current iteration without being allowed to run its AC in the congested time slots. If the constraints of the apartment are successfully satisfied this way, the algorithm moves on to the next member, and repeats this procedure until the threshold is satisfied or all apartments have been re-optimised. In any iteration, if the constraints of the apartment are not successfully satisfied, its best-found cooling plan (as a member of the coalition) will be reverted to its independently optimised case. Similarly, if at the end of the process the threshold constraint is not satisfied, the best-found cooling plan of all apartments will be reverted to their independently optimised cases. Since cOPT deals with each member of <italic>C</italic> at most once, its time complexity is a linear function of |<italic>C</italic>|. With the average coalition size being (<italic>n</italic> + 1)/2, the time complexity complexity is <italic>O</italic>((<italic>n</italic> + 1)/2) in the average case. As for memory requirement, for each member of <italic>C</italic>, we do not need to store more than what iOPT requires. Therefore, the space complexity is again a linear function of |<italic>C</italic>|, which in the average case is <italic>O</italic>((<italic>n</italic> + 1)/2).</p><p>The effect of this collective coordination on individual apartments is that those that are more flexible turn out to lower their internal temperature ahead of their comfort period, so that they can avoid running their AC in the congested time slots. This process can potentially result in an incremental reduction of the congestions, until the threshold is eventually satisfied. While the end result may not be optimal, this ensures that joining the grand coalition will not make any member worse off in any case, making it rational for them to sign up to the discount scheme.</p></sec><sec id="sec011"><title>Calculating payments using the Shapley value</title><p>Recall from section coordinating cooling loads discount scheme that the value of a coalition is given by the sum of the consumption of its members, when they collectively optimise their loads. Furthermore, we explained how a coalition can optimise its cooling plan in a computationally efficient manner. Therefore, based on the best-found cooling plans, we can calculate the coalition values and in turn the Shapley value of apartments, which is what they must pay for their consumption. In the next subsection, we argue why using the Shapley value based on the best-found cooling plans still results in a fair division of the discounted total cost. We then explain how the Shapley value in this setting can be efficiently calculated.</p><sec id="sec012"><title>Shapley value of bounded rational agents</title><p>A common assumption in cooperative game theory literature is that the characteristic function has a negligible computational cost, e.g., it can be done in constant time. However, in many real world problems, such as our discount scheme, and those considered in [<xref rid="pone.0227049.ref033" ref-type="bibr">33</xref>, <xref rid="pone.0227049.ref034" ref-type="bibr">34</xref>], computing the value of a coalition <italic>C</italic> involves solving a hard optimisation problem. In our setting, <italic>v</italic>(<italic>C</italic>) is hard to compute optimally. As such, we will refer to <italic>v</italic>(<italic>C</italic>) as the <italic>rational value</italic> (rather than simply the <italic>value</italic>) of <italic>C</italic>. The corresponding <italic>bounded rational game</italic> of (<italic>N</italic>, <italic>v</italic>) is a new game, denoted by (<italic>N</italic>, <italic>v</italic><sup><italic>BR</italic></sup>), where <italic>v</italic><sup><italic>BR</italic></sup>(<italic>C</italic>) is the best-found solution to the cooling plan of <italic>C</italic> that is obtained given the available computational resources. We will refer to <italic>v</italic><sup><italic>BR</italic></sup>(<italic>C</italic>) as the <italic>bounded rational value</italic> of coalition <italic>C</italic>.</p><p>Under the full rationality assumption, the rational value of every coalition is known, and thus, the value of the game can be fairly divided using the Shapley value. However, with bounded rational agents, the rational values of the coalitions are unknown, and it is not immediately clear how a fair division of the value of the game can be obtained. Next, we propose one way to deal with this issue.</p><p>We assume that it is possible to find a suboptimal solution to the cooling plan of every coalition in reasonable time (i.e., the bounded rational value). We also assume that an equal amount of computational resource is dedicated to calculating the value of each coalition. Note that this assumption does not imply that the cost of finding the bounded rational value of all coalitions is the same. Furthermore, in order to treat all agents without discrimination, we assume that the algorithm by which the coalition values are found is the same for all coalitions.</p><p><bold>Proposition 1</bold>. <italic>Given a game</italic>, (<italic>N, v</italic>), <italic>by allocating to each agent its Shapley value of the corresponding bounded rational game</italic>, (<italic>N</italic>, <italic>v</italic><sup><italic>BR</italic></sup>), <italic>a payoff division is obtained that is fair in the following sense: (i) it fairly allocates each agent a payoff for its contribution to the total value of the game, i.e</italic>., <italic>v</italic>(<italic>N</italic>), <italic>(ii) each agent is fairly penalised for contributing to v</italic>(<italic>N</italic>) <italic>not being equal to v</italic><sup><italic>BR</italic></sup>(<italic>N</italic>).</p><p>Let us introduce some additional notation to better understand the intuition behind this proposition. For every <italic>C</italic> &#x02286; <italic>N</italic>, let <italic>v</italic><sup><italic>RD</italic></sup>(<italic>C</italic>) denote the <italic>rationality discrepancy</italic> of coalition <italic>C</italic>, defined as the difference between the rational and bounded rational values of <italic>C</italic>. This can be viewed as a penalty that <italic>C</italic> as a whole has to pay due to its members&#x02019; lack of full rationality. More formally,
<disp-formula id="pone.0227049.e054"><alternatives><graphic xlink:href="pone.0227049.e054.jpg" id="pone.0227049.e054g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M54"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msup><mml:mi>v</mml:mi><mml:mrow><mml:mi>R</mml:mi><mml:mi>D</mml:mi></mml:mrow></mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo>|</mml:mo><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>-</mml:mo><mml:msup><mml:mi>v</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mi>R</mml:mi></mml:mrow></mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>|</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(11)</label></disp-formula></p><p>From <xref ref-type="disp-formula" rid="pone.0227049.e054">Eq (11)</xref> it is evident that the game (<italic>N</italic>, <italic>v</italic>) can be written as the sum of (<italic>N</italic>, <italic>v</italic><sup><italic>BR</italic></sup>) and (<italic>N</italic>, <italic>v</italic><sup><italic>RD</italic></sup>). Therefore, based on the additivity axiom of the Shapley value, the following holds:
<disp-formula id="pone.0227049.e055"><alternatives><graphic xlink:href="pone.0227049.e055.jpg" id="pone.0227049.e055g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M55"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>&#x003d5;</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mi>v</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mi>R</mml:mi></mml:mrow></mml:msup><mml:mo>]</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>&#x003d5;</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>v</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mo>&#x000b1;</mml:mo><mml:mi>&#x003d5;</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mi>v</mml:mi><mml:mrow><mml:mi>R</mml:mi><mml:mi>D</mml:mi></mml:mrow></mml:msup><mml:mo>]</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(12)</label></disp-formula></p><p>The sign in the above equation is negative or positive depending on whether <italic>v</italic> represents profit or cost, respectively. While both <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] and <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic><sup><italic>RD</italic></sup>] are unknown by assumption, it is possible to calculate <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic><sup><italic>BR</italic></sup>]. Importantly, this is in fact agent <italic>i</italic>&#x02019;s fair share of the total cost of the grand coalition (i.e., <italic>v</italic>(<italic>N</italic>)), which also factors in agent <italic>i</italic>&#x02019;s fair share of the penalty due to its bounded rationality.</p><p>The implication of Proposition 1 is that when agents cannot find an optimal solution, they can still expect to receive a fair share of <italic>v</italic><sup><italic>BR</italic></sup>(<italic>N</italic>). This is because <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic><sup><italic>BR</italic></sup>] also satisfies the Shapley value axioms, and is the only value that does so.</p><p>Intuitively, the more rational a coalition&#x02019;s members are (i.e., more computational resources are used to optimise their cooling loads), the smaller the rationality discrepancy of the coalition is. Therefore, if the agents in a game were fully rational, they would be able to diminish their penalty completely (i.e., <italic>v</italic><sup><italic>RD</italic></sup>(<italic>C</italic>) would be zero), and thus, <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic><sup><italic>BR</italic></sup>] would become exactly equal to <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] for all agents.</p><p>To illustrate Proposition 1 further, consider an example of a block consisting of three apartments that participate in the discount scheme. Through optimal coordination of their cooling loads, they are able to cap their aggregate load and achieve a discount of 50% per unit of electricity consumed. However, suppose that due to the thermal characteristics of the apartments and their temperature preferences, finding an optimal coordination in practice is so complex that they can manage to meet the threshold requirement, but can only approximately minimise their consumptions. As a result, the cost associated with coalitions is potentially higher than what would be possible if coordinating their loads were easier or more computational resources were available.</p><p>Now, to highlight the significance of Proposition 1, let us assume that Apartment 1 and 2 are identical in every respect, except that Apartment 1 is less flexible with its temperature preferences. Consequently, if computational resources were unlimited and its load were optimally coordinated with others, its cooling plan and temperature profile would be identical to those of Apartment 2. However, since in practice computational resources are limited, Apartment 1&#x02019;s stricter preferences require more computation to satisfy compared to Apartment 2. A set of example values that describe this scenario, and the corresponding Shapley values are shown in <xref rid="pone.0227049.t002" ref-type="table">Table 2</xref>.</p><table-wrap id="pone.0227049.t002" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.t002</object-id><label>Table 2</label><caption><title>Payments according to Proposition 1 in an example scenario.</title></caption><alternatives><graphic id="pone.0227049.t002g" xlink:href="pone.0227049.t002"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><tbody><tr><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>C</italic></td><td align="center" style="border-top:thick" rowspan="1" colspan="1">Threshold</td><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>v</italic>(<italic>C</italic>)</td><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>v</italic><sup><italic>BR</italic></sup>(<italic>C</italic>)</td><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>v</italic><sup><italic>RD</italic></sup>(<italic>C</italic>)</td></tr><tr><td align="center" rowspan="1" colspan="1">{}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" rowspan="1" colspan="1">$0</td><td align="center" rowspan="1" colspan="1">$0</td><td align="center" rowspan="1" colspan="1">$0</td></tr><tr><td align="center" rowspan="1" colspan="1">{1}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" rowspan="1" colspan="1">$10</td><td align="center" rowspan="1" colspan="1">$10</td><td align="center" rowspan="1" colspan="1">$0</td></tr><tr><td align="center" rowspan="1" colspan="1">{2}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" rowspan="1" colspan="1">$10</td><td align="center" rowspan="1" colspan="1">$10</td><td align="center" rowspan="1" colspan="1">$0</td></tr><tr><td align="center" rowspan="1" colspan="1">{3}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" rowspan="1" colspan="1">$18</td><td align="center" rowspan="1" colspan="1">$18</td><td align="center" rowspan="1" colspan="1">$0</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2}</td><td align="center" rowspan="1" colspan="1">Not Satisfied</td><td align="center" rowspan="1" colspan="1">$20</td><td align="center" rowspan="1" colspan="1">$20</td><td align="center" rowspan="1" colspan="1">$0</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 3}</td><td align="center" rowspan="1" colspan="1">Satisfied</td><td align="center" rowspan="1" colspan="1">$15</td><td align="center" rowspan="1" colspan="1">$18</td><td align="center" rowspan="1" colspan="1">$3</td></tr><tr><td align="center" rowspan="1" colspan="1">{2, 3}</td><td align="center" rowspan="1" colspan="1">Satisfied</td><td align="center" rowspan="1" colspan="1">$15</td><td align="center" rowspan="1" colspan="1">$16</td><td align="center" rowspan="1" colspan="1">$1</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2, 3}</td><td align="center" rowspan="1" colspan="1">Satisfied</td><td align="center" rowspan="1" colspan="1">$24</td><td align="center" rowspan="1" colspan="1">$28</td><td align="center" rowspan="1" colspan="1">$4</td></tr></tbody></table><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><tbody><tr><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>i</italic></td><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>]</td><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic><sup><italic>BR</italic></sup>]</td><td align="center" style="border-top:thick" rowspan="1" colspan="1"><italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic><sup><italic>RD</italic></sup>]</td></tr><tr><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">$7.50</td><td align="center" rowspan="1" colspan="1">$9</td><td align="center" rowspan="1" colspan="1">$1.50</td></tr><tr><td align="center" rowspan="1" colspan="1">2</td><td align="center" rowspan="1" colspan="1">$7.50</td><td align="center" rowspan="1" colspan="1">$8</td><td align="center" rowspan="1" colspan="1">$0.50</td></tr><tr><td align="center" rowspan="1" colspan="1">3</td><td align="center" rowspan="1" colspan="1">$9.00</td><td align="center" rowspan="1" colspan="1">$11</td><td align="center" rowspan="1" colspan="1">$2.00</td></tr></tbody></table></alternatives></table-wrap><p>It is immediately clear that for all three apartments, <xref ref-type="disp-formula" rid="pone.0227049.e055">Eq (12)</xref> holds. Note that when agents are rational, Apartment 1 and 2 have identical values and marginal contributions, and therefore equal Shapley values. However, when they are bounded rational, the higher complexity of coordinating Apartment 1&#x02019;s load with others means that Apartment 2 deserves a lower cost than Apartment 1, which is reflected by their bounded rational Shapley values. Proposition 1 establishes the fairness of this division. Apartment 1 and 2 are both fairly allocated a cost for contributing to the cost of any coalition in which they are involved. Simultaneously, they are individually penalised proportional to their contribution to the discrepancy between <italic>v</italic><sup><italic>BR</italic></sup> and <italic>v</italic> in any coalition in which they are involved. Moreover, Apartment 3, which has a higher individual cost than the other two in the rational case, still receives a portion of the discount when is bounded rational because it is able to coordinate its load when it is in a coalition with others.</p></sec><sec id="sec013"><title>Efficient implementation of the Shapley value</title><p>Calculating the bounded rational Shapley value of all agents using the standard formula, i.e., <xref ref-type="disp-formula" rid="pone.0227049.e003">Eq (1b)</xref>, requires computing the value of each coalition multiple times. This is because in the standard formula, for each agent, one must iterate through all <italic>C</italic> &#x02286; <italic>N</italic>, and in doing so <italic>v</italic>(<italic>C</italic>) is used multiple times. Therefore, the time complexity of computing the Shapley value for all agents using the standard implementation is <italic>O</italic>(<italic>n</italic> &#x000d7; 2<sup><italic>n</italic></sup> &#x000d7; <italic>O</italic>(<italic>v</italic>)). This is not an issue in games where the characteristic function does not have a considerable computational complexity. However, given the bounded rationality assumption, computing <italic>v</italic>(<italic>C</italic>) more than once is highly costly. One trivial way to overcome this is to store all coalition values in memory, but doing so requires exponential memory space. Alternatively, instead of iterating through agents, we can iterate through all subsets of <italic>N</italic>, and in each iteration, we calculate the value of the subset. Then, we use this to update <italic>all</italic> marginal contributions of <italic>all</italic> agents that require that value. This ensures that the value of any given coalition is computed exactly once. This results in a time complexity of <italic>O</italic>(2<sup><italic>n</italic></sup> &#x000d7; <italic>O</italic>(<italic>v</italic>)), at no additional memory space cost. Next, we explain this idea in more detail.</p><p>First, observe that calculating the marginal contribution of agent <italic>i</italic> to a coalition <italic>D</italic> requires the following two terms: <italic>v</italic>(<italic>D</italic> &#x0222a; {<italic>i</italic>}) and <italic>v</italic>(<italic>D</italic>), which represent the value of the coalition <italic>with</italic> and <italic>without</italic> the agent, respectively. More formally:
<disp-formula id="pone.0227049.e056"><alternatives><graphic xlink:href="pone.0227049.e056.jpg" id="pone.0227049.e056g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M56"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>M</mml:mi><mml:msub><mml:mi>C</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02192;</mml:mo><mml:mi>D</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>D</mml:mi><mml:mo>&#x0222a;</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:mi>i</mml:mi><mml:mo>}</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>-</mml:mo><mml:mi>v</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>D</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(13)</label></disp-formula></p><p>For each <italic>C</italic> &#x02286; <italic>N</italic>, we can use <italic>v</italic>(<italic>C</italic>) to calculate the &#x0201c;with agent&#x0201d; and &#x0201c;without agent&#x0201d; terms in marginal contributions of two groups of agents:</p><list list-type="bullet"><list-item><p>&#x02200;<italic>i</italic> &#x02208; <italic>C</italic> since &#x02203;<italic>D</italic> &#x02282; <italic>C</italic> s.t. <italic>D</italic> &#x0222a; {<italic>i</italic>} = <italic>C</italic>; <italic>v</italic>(<italic>C</italic>) corresponds to the &#x0201c;with agent&#x0201d; term.</p></list-item><list-item><p>&#x02200;<italic>i</italic> &#x02208; <italic>N</italic>&#x02216;<italic>C</italic>; <italic>v</italic>(<italic>C</italic>) corresponds to the &#x0201c;without agent&#x0201d; term.</p></list-item></list><p>Furthermore, recall that in <xref ref-type="disp-formula" rid="pone.0227049.e003">Eq (1b)</xref>, each marginal contribution is multiplied by a weight given by <xref ref-type="disp-formula" rid="pone.0227049.e005">Eq (2)</xref>. If we multiply each of the two terms above by its corresponding weight, they become <italic>&#x003c9;</italic>(<italic>n</italic>, |<italic>D</italic>|)<italic>v</italic>(<italic>D</italic> &#x0222a; {<italic>i</italic>}) and &#x02212;<italic>&#x003c9;</italic>(<italic>n</italic>, |<italic>D</italic>|)<italic>v</italic>(<italic>D</italic>). Therefore, to calculate the Shapley value, we sum all coalition values multiplied by their corresponding weight just as in <xref ref-type="disp-formula" rid="pone.0227049.e003">Eq (1b)</xref>:</p><list list-type="bullet"><list-item><p>For every non-empty coalition <italic>C</italic> &#x02282; <italic>N</italic>, <italic>v</italic>(<italic>C</italic>) is multiplied by <italic>&#x003c9;</italic>(<italic>n</italic>, |<italic>C</italic>| &#x02212; 1) for every <italic>i</italic> &#x02208; <italic>N</italic>&#x02216;<italic>C</italic>, and multiplied by &#x02212;<italic>&#x003c9;</italic>(<italic>n</italic>, |<italic>C</italic>|) for every <italic>i</italic> &#x02208; <italic>C</italic>, <italic>v</italic>(<italic>C</italic>).</p></list-item><list-item><p>For <italic>C</italic> = &#x02205;, <italic>v</italic>(<italic>C</italic>), which only represents the value of a coalition without the agent, is multiplied by &#x02212;<italic>&#x003c9;</italic>(<italic>n</italic>, 0).</p></list-item><list-item><p>For <italic>C</italic> = <italic>N</italic>, <italic>v</italic>(<italic>C</italic>), which only represents the value of a coalition with the agent, is multiplied by <italic>&#x003c9;</italic>(<italic>n</italic>, <italic>n</italic> &#x02212; 1).</p></list-item></list><p>The pseudocode of this process is presented in Algorithm 3.</p><p><bold>Algorithm 3</bold> Efficient Implementation of the Shapley Value</p><p specific-use="line"><bold>function</bold> ShapleyValue(<italic>N</italic>, <italic>v</italic>)</p><p specific-use="line"><italic>&#x003d5;</italic> &#x02190; [];</p><p specific-use="line">&#x02200;<italic>i</italic> &#x02208; <italic>N</italic>, <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] &#x02190; 0;</p><p specific-use="line"><bold>for all</bold>
<italic>C</italic> &#x02286; <italic>N</italic>
<bold>do</bold></p><p specific-use="line">&#x02003;<italic>weightWithAgent</italic> &#x02190; <italic>&#x003c9;</italic>(|<italic>N</italic>|, <italic>max</italic>(|<italic>C</italic>| &#x02212; 1, 0));</p><p specific-use="line">&#x02003;<italic>weightWithoutAgent</italic> &#x02190; &#x02212;<italic>&#x003c9;</italic>(|<italic>N</italic>|, <italic>min</italic>(|<italic>C</italic>|, |<italic>N</italic>| &#x02212; 1));</p><p specific-use="line">&#x02003;<bold>for all</bold>
<italic>i</italic> &#x02208; <italic>N</italic>
<bold>do</bold></p><p specific-use="line">&#x02003;&#x02003;<bold>if</bold>
<italic>i</italic> &#x02208; <italic>C</italic>
<bold>then</bold></p><p specific-use="line">&#x02003;&#x02003;&#x02003;<italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] &#x02190; <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] + (<italic>weightWithAgent</italic> &#x000d7; <italic>v</italic>(<italic>C</italic>));</p><p specific-use="line">&#x02003;&#x02003;<bold>else</bold></p><p specific-use="line">&#x02003;&#x02003;&#x02003;<italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] &#x02190; <italic>&#x003d5;</italic>[<italic>i</italic>, <italic>v</italic>] + (<italic>weightWithoutAgent</italic> &#x000d7; <italic>v</italic>(<italic>C</italic>));</p><p specific-use="line">&#x02003;&#x02003;<bold>end if</bold></p><p specific-use="line">&#x02003;<bold>end for</bold></p><p specific-use="line"><bold>end for</bold></p><p specific-use="line"><bold>return</bold>
<italic>&#x003d5;</italic></p></sec><sec id="sec014"><title>Efficient calculation of the Shapley value using dynamic programing</title><p>In calculating the bounded rational Shapley value, when cOPT is sequentially applied to the subsets of the grand coalition, some steps of optimising one coalition are repeated in optimising subsequent coalitions. By taking advantage of this recurrence, we can create a dynamic programming (DP) algorithm to calculate the bounded rational Shapley value much more efficiently. Next, we explain this approach in more detail.</p><p>To calculate the Shapley value using Algorithm 3, we need to optimise all subsets <italic>C</italic> of the grand coalition one by one. Recall that based on the flexibility heuristic of <xref ref-type="disp-formula" rid="pone.0227049.e053">Eq (10)</xref>, we initially sort <italic>N</italic> such that Apartment 1 and Apartment <italic>n</italic> are the least and most flexible members, respectively. Then, cOPT independently optimises all apartments using iOPT, and the set of congested time slots given the independent optimisations are identified. If the result of the optimisations (and the congested time slots) up to this point were stored, we could avoid re-computing them 2<sup><italic>n</italic></sup> times. This is because these steps are repeated in each iteration of the collective optimisation.</p><p>The next step of cOPT is re-optimising the members of <italic>C</italic> given the congested time slots. This is always done starting from the least flexible member. Clearly, in any subset of <italic>N</italic>, one member is the least flexible, which is exactly the least flexible member in many other subsets as well. Therefore, that member is always re-optimised first in all those coalitions, which always results in exactly the same load profile for that apartment and the same set of congested time slots. For instance, when cOPT wants to optimise any coalition containing Apartment 1, it always performs decongestion starting from Apartment 1, since it is the least flexible member of the coalition. If the re-optimisation of Apartment 1 is successful (i.e., merely its own preferences are satisfied, not necessarily the threshold), the optimisation results and the newly computed congested time slots can be reused in any other coalition of which Apartment 1 is a member. If the re-optimisation is not successful, we revert back to the independently optimised load profile and the corresponding set of congested time slots which were previously stored in the memory. Likewise, when the next least flexible apartment in the coalition is re-optimised the results can be stored in the memory so that they are later used by cOPT in re-optimising other coalitions. Taking advantage of this recursion can greatly reduce the computation needed for optimising the 2<sup><italic>n</italic></sup> subsets of <italic>N</italic>. The following example further illustrates the recursion.</p><p>Suppose that in a game of 5 apartments, we want to optimise {1}. We must first optimise all apartments independently, which yields a load profile for all members as well as a set of congested time slots &#x0039b;<sub>&#x02205;</sub>. If Apartment 1 can be re-optimised such that its temperature preferences are satisfied, a new set of congested time slots, &#x0039b;<sub>{1}</sub>, will be yielded. Let us assume that re-optimising Apartments 1 indeed results in satisfying its preferences, but &#x0039b;<sub>{1}</sub> is not empty (i.e., there are some congested time slots). Here, although the best-found cooling plan of Apartment 1 will be reverted to its independently optimised cooling plan (since the threshold is not satisfied), we can store the result of re-optimising Apartment 1 as well as &#x0039b;<sub>{1}</sub> so that they can be reused in optimising any other coalition that contains Apartment 1. Now, suppose that we would like to optimise {1, 2}. After using the stored results from re-optimising {1}, since &#x0039b;<sub>{1}</sub> is not empty, we need to also re-optimise Apartment 2 which will yield &#x0039b;<sub>{1,2}</sub>. Regardless of whether &#x0039b;<sub>{1,2}</sub> is empty or not, every time a coalition that contains Apartment 1 and Apartment 2 (e.g., {1, 2, 4, 5}) is optimised, re-optimising Apartment 1 and Apartment 2 will result in the same cooling plans for these two, and the same &#x0039b;<sub>{1}</sub> and &#x0039b;<sub>{1,2}</sub>. Therefore, if after each re-optimisation we stored the cooling plans along with the resulting set of congested time slots, we would not need to compute them again in optimising the subsequent coalitions. This way, for each coalition we would need to re-optimise only one apartment, which is essentially the most flexible member. Furthermore, note that when Shapley values are calculated using Algorithm 3, it is important to iterate through the subsets of the grand coalition such that optimising any coalition would depend only on the previously visited ones. To ensure this, we use the natural order of subsets in binary representation. In this representation, a non-empty coalition <italic>C</italic> = {<italic>c</italic><sub>1</sub>, <italic>c</italic><sub>2</sub>, &#x02026;, <italic>c</italic><sub><italic>m</italic></sub>} is represented by the binary equivalent of <inline-formula id="pone.0227049.e057"><alternatives><graphic xlink:href="pone.0227049.e057.jpg" id="pone.0227049.e057g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M57"><mml:mrow><mml:msup><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msup><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mo>&#x02026;</mml:mo><mml:mo>+</mml:mo><mml:msup><mml:mn>2</mml:mn><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo>&#x02212;</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>, where each bit indicates whether or not the corresponding agent is a member of the coalition. For instance, {2, 3} comes immediately before {1, 2, 3} as their corresponding binary numbers are 110 and 111, respectively. <xref rid="pone.0227049.t003" ref-type="table">Table 3</xref> illustrates the recursion in the collective optimisation using the binary representation. For example, for optimising {1, 2, 4}, the right column shows that the result of optimising {1, 2} is re-used, which is itself optimised using the result of optimising {1}.</p><table-wrap id="pone.0227049.t003" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.t003</object-id><label>Table 3</label><caption><title>Binary representation of coalitions in the 5 apartments example.</title><p>The underlined members are the only ones in each coalition that may be re-optimised.</p></caption><alternatives><graphic id="pone.0227049.t003g" xlink:href="pone.0227049.t003"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><thead><tr><th align="center" style="border-top:thick" rowspan="1" colspan="1">Coalition</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">A5</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">A4</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">A3</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">A2</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">A1</th><th align="center" style="border-top:thick" rowspan="1" colspan="1">From Memory</th></tr></thead><tbody><tr><td align="center" rowspan="1" colspan="1">{}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">&#x02212;</td></tr><tr><td align="center" rowspan="1" colspan="1">{1}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">{}</td></tr><tr><td align="center" rowspan="1" colspan="1">{2}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">{}</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">{1}</td></tr><tr><td align="center" rowspan="1" colspan="1">{3}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">{}</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 3}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">{1}</td></tr><tr><td align="center" rowspan="1" colspan="1">{2, 3}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">{2}</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2, 3}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">{1, 2}</td></tr><tr><td align="center" rowspan="1" colspan="1">{4}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">{}</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 4}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">{1}</td></tr><tr><td align="center" rowspan="1" colspan="1">{2, 4}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">{2}</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2, 4}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">{1, 2}</td></tr><tr><td align="center" rowspan="1" colspan="1">{3, 4}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">{3}</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 3, 4}</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">0</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">{1, 3}</td></tr><tr><td align="center" rowspan="1" colspan="1">&#x02026;</td><td align="center" rowspan="1" colspan="1">&#x02026;</td><td align="center" rowspan="1" colspan="1">&#x02026;</td><td align="center" rowspan="1" colspan="1">&#x02026;</td><td align="center" rowspan="1" colspan="1">&#x02026;</td><td align="center" rowspan="1" colspan="1">&#x02026;</td><td align="center" rowspan="1" colspan="1">&#x02026;</td></tr><tr><td align="center" rowspan="1" colspan="1">{1, 2, 3, 4, 5}</td><td align="center" rowspan="1" colspan="1"><underline>1</underline></td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">{1, 2, 3, 4}</td></tr></tbody></table></alternatives></table-wrap><p>Based on the recursion described above, we can construct a DP algorithm to calculate the Shapley value of the apartments more efficiently. This will enable us to (re-)optimise only one apartment per coalition&#x02014;the most flexible apartment&#x02014;since the cooling plan of the rest of the members can be used from the previously optimised coalitions. In fact, the time complexity of calculating the Shapley value of all agents can be reduced to <italic>O</italic>(2<sup><italic>n</italic></sup>), down from <italic>O</italic>(<italic>n</italic> &#x000d7; 2<sup><italic>n</italic></sup>). However, this computational benefit comes at a memory space cost of <italic>O</italic>(|<italic>C</italic>|) for each <italic>C</italic> &#x02286; <italic>N</italic>, which implies an exponential space complexity overall. We next formalise the recurrence relation.</p><p>Let a coalition sorted in the ascending order of its members&#x02019; flexibility (according to <xref ref-type="disp-formula" rid="pone.0227049.e053">Eq 10</xref>) be <italic>C</italic> = {1, 2, &#x02026;, <italic>m</italic>}, such that apartments 1 and <italic>m</italic> are the least and most flexible apartments, respectively. Furthermore, let &#x0039b;<sub><italic>C</italic></sub> denote the set of congested time slots obtained by re-optimising <italic>m</italic>, given the set of congested time slots, &#x0039b;<sub><italic>C</italic>&#x02216;{<italic>m</italic>}</sub>, obtained by re-optimising the most flexible apartment in <italic>C</italic>&#x02216;{<italic>m</italic>} (i.e., <italic>m</italic> &#x02212; 1). As such, &#x0039b;<sub>&#x02205;</sub> is the set of congested time slots after optimising all apartments independently, and &#x0039b;<sub><italic>N</italic></sub> is the set of congested time slots obtained by re-optimising apartment <italic>n</italic> given &#x0039b;<sub><italic>N</italic></sub>&#x02216;{<italic>n</italic>}. Moreover, let a vector of re-optimised cooling actions of the most flexible apartment in coalition <italic>C</italic> over an entire day be denoted by <inline-formula id="pone.0227049.e058"><alternatives><graphic xlink:href="pone.0227049.e058.jpg" id="pone.0227049.e058g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M58"><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mo>&#x0039b;</mml:mo><mml:mrow><mml:mi>C</mml:mi><mml:mo>\</mml:mo><mml:mo>{</mml:mo><mml:mi>m</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:msub></mml:msubsup></mml:math></alternatives></inline-formula>, which is obtained by re-optimising <italic>m</italic> given &#x0039b;<sub><italic>C</italic>&#x02216;{<italic>m</italic>}</sub>. Note that if <italic>m</italic> cannot be re-optimised based on &#x0039b;<sub><italic>C</italic>&#x02216;{<italic>m</italic>}</sub> such that its temperature preferences can be satisfied, then <inline-formula id="pone.0227049.e059"><alternatives><graphic xlink:href="pone.0227049.e059.jpg" id="pone.0227049.e059g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M59"><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mo>&#x0039b;</mml:mo><mml:mrow><mml:mi>C</mml:mi><mml:mo>\</mml:mo><mml:mo>{</mml:mo><mml:mi>m</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:msub></mml:msubsup></mml:math></alternatives></inline-formula> will simply be the independently optimised plan that is found by <italic>iOPT</italic>. Denote by <inline-formula id="pone.0227049.e060"><alternatives><graphic xlink:href="pone.0227049.e060.jpg" id="pone.0227049.e060g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M60"><mml:msubsup><mml:mi>l</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mo>&#x0039b;</mml:mo><mml:mrow><mml:mi>C</mml:mi><mml:mo>\</mml:mo><mml:mo>{</mml:mo><mml:mi>m</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:msub></mml:msubsup></mml:math></alternatives></inline-formula> the vector of best-found cooling load of apartment <italic>m</italic> that is given by <xref ref-type="disp-formula" rid="pone.0227049.e010">Eq (3)</xref> using <inline-formula id="pone.0227049.e061"><alternatives><graphic xlink:href="pone.0227049.e061.jpg" id="pone.0227049.e061g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M61"><mml:msubsup><mml:mi>&#x003b7;</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mo>&#x0039b;</mml:mo><mml:mrow><mml:mi>C</mml:mi><mml:mo>\</mml:mo><mml:mo>{</mml:mo><mml:mi>m</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:msub></mml:msubsup></mml:math></alternatives></inline-formula>. We can now compute the vector of best-found aggregate cooling load, <inline-formula id="pone.0227049.e062"><alternatives><graphic xlink:href="pone.0227049.e062.jpg" id="pone.0227049.e062g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M62"><mml:mrow><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mo>&#x02032;</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mrow><mml:mo>[</mml:mo><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:msup><mml:mrow/><mml:mo>&#x02032;</mml:mo></mml:msup><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:msup><mml:mrow/><mml:mo>&#x02032;</mml:mo></mml:msup><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>&#x02026;</mml:mo><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mrow><mml:msup><mml:mrow/><mml:mo>&#x02032;</mml:mo></mml:msup><mml:mi>k</mml:mi></mml:mrow></mml:msubsup><mml:mo>]</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>, of a coalition, <italic>C</italic> &#x02260; &#x02205;, using the following recursive formula:
<disp-formula id="pone.0227049.e063"><alternatives><graphic xlink:href="pone.0227049.e063.jpg" id="pone.0227049.e063g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M63"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msubsup><mml:mi>l</mml:mi><mml:mi>C</mml:mi><mml:mo>&#x02032;</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mstyle displaystyle="true" scriptlevel="0"><mml:mrow><mml:munder><mml:mo>&#x02211;</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>&#x02208;</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>&#x02032;</mml:mo><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:msubsup></mml:mrow></mml:mstyle></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mrow><mml:mtext>if</mml:mtext><mml:mspace width="0.277778em"/><mml:mo>|</mml:mo><mml:mi>C</mml:mi><mml:mo>|</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mspace width="0.277778em"/><mml:mtext>or</mml:mtext><mml:mspace width="0.277778em"/><mml:msub><mml:mo>&#x0039b;</mml:mo><mml:mi>C</mml:mi></mml:msub><mml:mo>&#x02260;</mml:mo><mml:mi>&#x02205;</mml:mi></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mrow><mml:msubsup><mml:mi>l</mml:mi><mml:mrow><mml:mi>C</mml:mi><mml:mo>\</mml:mo><mml:mo>{</mml:mo><mml:mi>m</mml:mi><mml:mo>}</mml:mo></mml:mrow><mml:mo>&#x02032;</mml:mo></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>l</mml:mi><mml:mi>m</mml:mi><mml:msub><mml:mo>&#x0039b;</mml:mo><mml:mrow><mml:mi>C</mml:mi><mml:mo>\</mml:mo><mml:mo>{</mml:mo><mml:mi>m</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:msub></mml:msubsup></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mtext>if</mml:mtext><mml:mspace width="0.277778em"/><mml:msub><mml:mo>&#x0039b;</mml:mo><mml:mi>C</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>&#x02205;</mml:mi></mml:mrow></mml:mtd></mml:mtr></mml:mtable><mml:mo/><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(14)</label></disp-formula>
where <inline-formula id="pone.0227049.e064"><alternatives><graphic xlink:href="pone.0227049.e064.jpg" id="pone.0227049.e064g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M64"><mml:msubsup><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mrow><mml:mo>&#x02032;</mml:mo><mml:mo>&#x02032;</mml:mo></mml:mrow></mml:msubsup></mml:math></alternatives></inline-formula> is the vector of best-found cooling actions of apartment <italic>i</italic> when it optimises its load independently. Using Eqs <xref ref-type="disp-formula" rid="pone.0227049.e063">(14)</xref> and <xref ref-type="disp-formula" rid="pone.0227049.e015">(4)</xref> we can easily find the bounded rational value of <italic>C</italic>, i.e., <italic>v</italic><sup><italic>BR</italic></sup>(<italic>C</italic>). Our experiments in the next section verify that the DP method results in a significant reduction of computation time.</p></sec></sec><sec id="sec015"><title>Evaluation of the payments of apartments</title><p>We now undertake an evaluation of applying the bounded rational Shapley value to the discount scheme. To this end, we consider a block of 15 apartments participating in the scheme. However, since there are myriad ways in which 15 apartments can require cooling over the course of a day, it is impossible to systematically evaluate their payments with all possible combinations of setpoints, tolerances and comfort periods. Therefore, our experiments investigate how the payments incurred by one apartment change, as its preferences are varied, while other apartments&#x02019; preferences remain constant. This is to isolate the effect of each varying parameter on the payments. Our aim is to simulate the preferences and thermal characteristics of the apartments in a way that represents a severe case in terms of satisfying the optimisation constraints&#x02013;most, if not all, other cases will be arguably easier to deal with. One such case is realised when a maximum peak occurs in all congested time slots. The following preferences and thermal characteristics ensure this.</p><p>We assume that the AC system in all apartments operate on a 10-minute cycle, i.e., a cooling decision is made for each 10-minute interval in a day (&#x00394;<italic>t</italic> = 1/6hr), and thus, <italic>K</italic> = [1, &#x02026;, 144]. We also assume that the AC systems in all apartments are similar, with an <italic>r</italic> value of 1.0 &#x000b0;<italic>C</italic>/<italic>h</italic> and consume at a rate of 4.0 kW when on (i.e., <italic>P</italic><sub><italic>i</italic></sub> = 4.0 kW). Therefore, the maximum possible load of the entire block is 60 kW. When the apartments participate in the scheme, a threshold (<italic>&#x003c8;</italic>) at 32 kW (representing a 47% reduction), is set on the block&#x02019;s load. If the aggregate load throughout the day is always below 32 kW, the price per kWh of energy consumed over the entire day is $0.08, otherwise it is $0.15. All apartments have the same setpoint of 22&#x000b0;<italic>C</italic>, tolerance level of 1&#x000b0;<italic>C</italic>, and require cooling from 15:00 to 21:30. As can be seen in <xref ref-type="fig" rid="pone.0227049.g005">Fig 5</xref>, these assumptions ensure that when all apartments optimise their load independently, their AC is run during exactly the same time slots, causing a maximum peak (i.e., 60 kW) in all congested time slots. Moreover, to exclude the impact of thermal characteristics of the other 14 apartments, we assume that all leakage rates are equal and as follows: <italic>&#x003b1;</italic> = 0.005, <italic>&#x003b2;</italic> = 0.005, and <italic>&#x003b3;</italic> = 0.05. These numbers are based on realistic values learned from real data collected from a number of apartments in Jeddah, Saudi Arabia.</p><fig id="pone.0227049.g005" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.g005</object-id><label>Fig 5</label><caption><title>Total load when apartments optimise individually and collectively.</title></caption><graphic xlink:href="pone.0227049.g005"/></fig><p>The total cooling load when the 15 apartments, with the above settings and parameters, optimise their load individually and collectively are shown in <xref ref-type="fig" rid="pone.0227049.g005">Fig 5</xref>. As is evident, using cOPT (Algorithm 2), the apartments are able to find an alternative cooling plan such that in addition to their individual temperature preferences, the threshold of 32 kW is also met.</p><p>Having established the satisfiability of the threshold constraint, we now vary the preferences of one of the 15 apartments, and keep the preferences and thermal properties of others constant. We compare the payments that the apartment can be charged for its consumption in four different cases: (i) when the apartment does not sign up to the discount scheme and optimises its load independently, (ii) when the apartment optimises its load as a member of the coalition and benefits from the discount, but only its consumption in the grand coalition is considered (unlike the Shapley value which considers all subsets of the grand coalition), (iii) when the apartment optimises its load as a member of the coalition and each apartment receives an equal share of the total saving from the discount (the difference between the payment of the grand coalition at the discounted and normal rates is equally divided and deducted from the payment of each apartment), and (iv) when the apartment optimises its load as a member of the coalition and receives its bounded rational Shapley value. We additionally show the bounded rational Shapley value of the rest of the apartments, which are essentially equal due to identical settings. The value of a coalition in this experiment is calculated as per <xref ref-type="disp-formula" rid="pone.0227049.e016">Eq (5)</xref>, which represents its bounded rationality value.</p><p>In our experiments, we investigate the relationship between payments and different values of setpoint temperature, setpoint deviation tolerance, and leakage rate, the results of which are depicted in <xref ref-type="fig" rid="pone.0227049.g006">Fig 6</xref>. These comparisons enable us to develop an in-depth understanding of how sensitive the bounded rational Shapley value and the other naive payment mechanisms are to the variations in the aforementioned parameters. As expected, all three experiments verify that the payments based on the bounded rationality Shapley value are consistently smaller than what the apartment would have to pay if it did not participate in the scheme.</p><fig id="pone.0227049.g006" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.g006</object-id><label>Fig 6</label><caption><title>The payments of an apartment versus setpoint, deviation tolerance and leakage rate.</title></caption><graphic xlink:href="pone.0227049.g006"/></fig><p>To explore the relationship between the setpoint temperature settings and payments, we vary <italic>T</italic><sub><italic>set</italic></sub> from 22&#x000b0;C to 26&#x000b0;C, while leaving the other preferences unchanged. We calculate the four payment cases described above for each setpoint temperature setting, and calculate the corresponding payment that the apartment incurs for a single day of cooling. From <xref ref-type="fig" rid="pone.0227049.g006">Fig 6</xref>, it is evident that the relationship between the setpoint temperature and payments follows our intuition that when the setpoint is increased, less cooling is required and hence the payment reduces. This reduction occurs until the setpoint is set so high that very little cooling is needed, at which point the payments do not change. It is also evident that an apartment stands to benefit from its participation in the scheme by receiving its bounded rational Shapley value, since the payment it incurs for a setpoint setting is always lower than what it would incur if it chose to optimise its cooling load independently. Somewhat unsurprisingly, the bounded rationality Shapley value of other apartments across different setpoints of the apartment in question remains equal but consistently higher. This shows that the extra flexibility of this apartment (due to its higher setpoint) does not make other members better off or worse off. However, higher setpoint results in less cooling, hence the lower payment compared to others. Moreover, when the independently optimised and the bounded rationality Shapley value curves converge, it means that the energy consumption in and out of the coalition are very close, which occurs when the setpoint is set relatively high. Note that if the payment goes below zero&#x02013;which could possibly occur due to the proportion of discount and consumption&#x02013;the equivalent credit can be awarded to the apartments so that it can be used towards their bill. Furthermore, note that when the setpoint is 22.0&#x000b0;C, all payments (including those of other apartments) except the independently optimised one are equal. This indicates that when all apartments have identical settings, all methods result in the same payment. Therefore, in that case one can simply use the equally divided discount method whose computation is much simpler than the bounded rational Shapley value.</p><p>Previously, we described how <italic>&#x003b8;</italic> is indicative of the sensitivity of an apartment to deviations of the internal temperature from the setpoint. We next explore how the payment incurred for a particular setting changes as <italic>&#x003b8;</italic> is varied from 1.0&#x000b0;C to 4.0&#x000b0;C. Again, we calculate the corresponding payment cases for each setting, for a single day of cooling. From <xref ref-type="fig" rid="pone.0227049.g006">Fig 6</xref>, it is evident that the relationship between <italic>&#x003b8;</italic> and payments is almost linear. As <italic>&#x003b8;</italic> is increased, the payments decrease, which shows that the amount of energy required to satisfy the setpoint constraint becomes less and less. Therefore, an apartment with a high setpoint tolerance is easier to satisfy, which is one of the facts that we exploit in the collective optimisation to satisfy the load threshold. Observe that similar to the setpoint experiment, the payments of the other apartments are constant throughout.</p><p>In previous sections, we established how the leakage rate, <italic>&#x003b3;</italic> is related to the level of insulation of an apartment. We also mentioned how an apartment with a high <italic>&#x003b3;</italic> value will typically incur higher energy consumption. Following this trend, we now establish the relationship between <italic>&#x003b3;</italic> and the payment that one apartment incurs for a single day of cooling. To do so, we vary <italic>&#x003b3;</italic> from 0.05&#x000b0;C/hr, representing a relatively high level of insulation to to 0.096&#x000b0;C/hr, representing a relatively poorly insulated apartment. For each <italic>&#x003b3;</italic> value, the payment that the apartment incurs for a single day of cooling is then calculated based on the four payment cases. <xref ref-type="fig" rid="pone.0227049.g006">Fig 6</xref> depicts that the relationship between the leakage rates and the payments is monotonically increasing in all cases. The discounted payments are initially close, but as the apartment becomes leakier, the payments diverge, which makes it more justifiable to choose the method that is fair. Of the three parameters considered in these experiments, the payments seem to exhibit more sensitivity to leakage rate, as small changes in <italic>&#x003b3;</italic> results in relatively higher changes in the payments. Also, the larger gap between the bounded rationality Shapley value and the independently optimised curves indicates a higher sensitivity of the payments to thermal leakage when the apartment is in the coalition than when it is not. This can further motivate a leaky apartment to sign up to the scheme and benefit from the better insulation of other apartments which require less cooling. Interestingly, the other apartments also stand to benefit from the existence of a leakier apartment in the coalition. As can be seen in the plot, the bounded rationality Shapley value of other apartments (whose leakage is less) slightly decreases with higher values of <italic>&#x003b3;</italic>. This is in contrast to the two previous experiments.</p><p>The three experiments discussed above demonstrate the interesting properties of the bounded rationality Shapley value as a payment mechanism. We also note the computational advantage of using the bounded rational Shapley value particularly when it is calculated using the DP method described in subsection efficient calculation of the Shapley value using dynamic programing, which significantly reduces computation time. <xref ref-type="fig" rid="pone.0227049.g007">Fig 7</xref> shows a comparison of the time it takes to calculate the bounded rational Shapley value of an entire block, when there are 3 to 15 apartments, using the DP method and without it. In both cases, the Shapley value is calculated using Algorithm 3, which is itself a significantly more efficient implementation of the standard Shapley value formula. It is evident that an exponential gain in computation time is achieved with the DP method.</p><fig id="pone.0227049.g007" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0227049.g007</object-id><label>Fig 7</label><caption><title>Computation time of the Shapley value with different coalition sizes.</title></caption><graphic xlink:href="pone.0227049.g007"/></fig></sec><sec id="sec016"><title>Conclusions and future work</title><p>In this article, we considered a real-world problem where a block of apartments participate in a demand response program to ensure their aggregate cooling load does not exceed a certain threshold. In return, the apartments receive a discount for coordinating their loads. In this problem, a coalition of apartments needs to optimise its members&#x02019; use of air conditioning subject to the individual temperature preferences of each apartment and the given threshold. Due to the magnitude of the constraints involved, computing the optimal load of a coalition is computationally intensive. Instead of solving this problem optimally, we used a greedy algorithm which produced suboptimal solutions at a higher speed. Consequently, a suboptimal value for each coalition could be found, enabling us to calculate the cost of coalitions in a reasonable time. However, calculating the Shapley value in this setting still entails an extra computational challenge, namely solving an exponential number of optimisation problems. Since optimising the load of coalitions with respect to all constraints can take a considerable amount of time, and the agents do not have infinite computational resources, the agents are considered to be computationally bounded rational. While using the Shapley value as a fair division of the optimal value of the grand coalition may not be possible in practice, we proposed that based on the additivity axiom of the Shapley value it is still possible to obtain a fair division using the aforementioned greedy algorithm, which is fast but not necessarily optimal.</p><p>The Shapley value given the suboptimal coalition values (which we call the bounded rational Shapley value), is not only easier to calculate, but also provides a division of the grand coalition that is fair in the following sense: all agents are rewarded for their contribution to the total cost of the block (at the discounted rate), and simultaneously penalised for their contribution to the extra cost that is due to the discrepancy between the suboptimal and optimal solutions.</p><p>Since in many real world problems the number of agents is beyond what the Shapley value can be easily calculated for, one of our concerns is the scalability of the bounded rational Shapley value. Therefore, in future work, we would like to explore how our approach can be applied to similar demand response scenarios consisting of large number of agents. We would be interested in investigating how approximation techniques could be used to scale up the game, without losing the fairness properties of the bounded rational Shapley value.</p></sec><sec sec-type="supplementary-material" id="sec017"><title>Supporting information</title><supplementary-material content-type="local-data" id="pone.0227049.s001"><label>S1 Dataset</label><caption><title>The temperature data and thermal parameters of individual apartments.</title><p>(ZIP)</p></caption><media xlink:href="pone.0227049.s001.zip"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material></sec></body><back><ack><p>This work was funded by the Deanship of Scientific Research (DSR), King Abdulaziz University (KAU), under grant No. (9-15-1432-HiCi). The authors, therefore, acknowledge technical and financial support of KAU. This work was also supported in Iran by the National Elites Foundation, and in the United Kingdom by the &#x02018;Intelligent Agents for Home Energy Management&#x02019; project (EP/I000143/1) and ORCHID programme grant (EP/I011587/1). The authors are also grateful for the useful feedback received from the anonymous reviewers.</p></ack><ref-list><title>References</title><ref id="pone.0227049.ref001"><label>1</label><mixed-citation publication-type="book">
<collab>US Department of Energy</collab>. <source>Grid 2030: A National Vision For Electricity&#x02019;s Second 100 Years</source>. <publisher-name>United States of America Department of Energy</publisher-name>; <year>2008</year>.</mixed-citation></ref><ref id="pone.0227049.ref002"><label>2</label><mixed-citation publication-type="journal">
<name><surname>Ramchurn</surname><given-names>SD</given-names></name>, <name><surname>Vytelingum</surname><given-names>P</given-names></name>, <name><surname>Rogers</surname><given-names>A</given-names></name>, <name><surname>Jennings</surname><given-names>NR</given-names></name>. <article-title>Putting the &#x0201c;smarts&#x0201d; into the Smart Grid: A Grand Challenge for Artificial Intelligence</article-title>. <source>Communications of the ACM</source>. <year>2012</year>;<volume>55</volume>(<issue>4</issue>):<fpage>86</fpage>&#x02013;<lpage>97</lpage>. <pub-id pub-id-type="doi">10.1145/2133806.2133825</pub-id></mixed-citation></ref><ref id="pone.0227049.ref003"><label>3</label><mixed-citation publication-type="journal">
<name><surname>Dutta</surname><given-names>G</given-names></name>, <name><surname>Mitra</surname><given-names>K</given-names></name>. <article-title>A literature review on dynamic pricing of electricity</article-title>. <source>Journal of the Operational Research Society</source>. <year>2017</year>;<volume>68</volume>(<issue>10</issue>):<fpage>1131</fpage>&#x02013;<lpage>1145</lpage>. <pub-id pub-id-type="doi">10.1057/s41274-016-0149-4</pub-id></mixed-citation></ref><ref id="pone.0227049.ref004"><label>4</label><mixed-citation publication-type="journal">
<name><surname>Quillinan</surname><given-names>JD</given-names></name>. <article-title>Pricing for retail electricity</article-title>. <source>Journal of Revenue and Pricing Management</source>. <year>2011</year>;<volume>10</volume>(<issue>6</issue>):<fpage>545</fpage>&#x02013;<lpage>555</lpage>. <pub-id pub-id-type="doi">10.1057/rpm.2011.22</pub-id></mixed-citation></ref><ref id="pone.0227049.ref005"><label>5</label><mixed-citation publication-type="journal">
<name><surname>Simshauser</surname><given-names>P</given-names></name>, <name><surname>Downer</surname><given-names>D</given-names></name>. <article-title>On the Inequity of Flat-rate Electricity Tariffs</article-title>. <source>The Energy Journal</source>. <year>2016</year>;<volume>0</volume> (<issue>3</issue>). <pub-id pub-id-type="doi">10.5547/01956574.37.3.psim</pub-id></mixed-citation></ref><ref id="pone.0227049.ref006"><label>6</label><mixed-citation publication-type="journal">
<name><surname>McNeil</surname><given-names>MA</given-names></name>, <name><surname>Letschert</surname><given-names>VE</given-names></name>. <article-title>Future Air Conditioning Energy Consumption in Developing Countries and what can be done about it: The Potential of Efficiency in the Residential Sector</article-title>. <source>Lawrence Berkeley National Laboratory</source>. <year>2008</year>;.</mixed-citation></ref><ref id="pone.0227049.ref007"><label>7</label><mixed-citation publication-type="journal">
<name><surname>Yuan-Yih</surname><given-names>Hsu</given-names></name>, <name><surname>Chung-Ching</surname><given-names>Su</given-names></name>. <article-title>Dispatch of direct load control using dynamic programming</article-title>. <source>IEEE Transactions on Power Systems</source>. <year>1991</year>;<volume>6</volume>(<issue>3</issue>):<fpage>1056</fpage>&#x02013;<lpage>1061</lpage>. <pub-id pub-id-type="doi">10.1109/59.119246</pub-id></mixed-citation></ref><ref id="pone.0227049.ref008"><label>8</label><mixed-citation publication-type="journal">
<name><surname>Dong</surname><given-names>L</given-names></name>, <name><surname>Falvey</surname><given-names>R</given-names></name>, <name><surname>Luckraz</surname><given-names>S</given-names></name>. <article-title>Fair share and social efficiency: A mechanism in which peers decide on the payoff division</article-title>. <source>Games and Economic Behavior</source>. <year>2019</year>;<volume>115</volume>:<fpage>209</fpage>&#x02013;<lpage>224</lpage>. <pub-id pub-id-type="doi">10.1016/j.geb.2019.02.016</pub-id></mixed-citation></ref><ref id="pone.0227049.ref009"><label>9</label><mixed-citation publication-type="journal">
<name><surname>Battaglini</surname><given-names>M</given-names></name>, <name><surname>Nunnari</surname><given-names>S</given-names></name>, <name><surname>Palfrey</surname><given-names>TR</given-names></name>. <article-title>The Dynamic Free Rider Problem: A Laboratory Study</article-title>. <source>American Economic Journal: Microeconomics</source>. <year>2016</year>;<volume>8</volume>(<issue>4</issue>):<fpage>268</fpage>&#x02013;<lpage>308</lpage>.</mixed-citation></ref><ref id="pone.0227049.ref010"><label>10</label><mixed-citation publication-type="journal">
<name><surname>Chakraborty</surname><given-names>P</given-names></name>, <name><surname>Baeyens</surname><given-names>E</given-names></name>, <name><surname>Poolla</surname><given-names>K</given-names></name>, <name><surname>Khargonekar</surname><given-names>PP</given-names></name>, <name><surname>Varaiya</surname><given-names>P</given-names></name>. <article-title>Sharing Storage in a Smart Grid: A Coalitional Game Approach</article-title>. <source>IEEE Transactions on Smart Grid</source>. <year>2019</year>;<volume>10</volume>(<issue>4</issue>):<fpage>4379</fpage>&#x02013;<lpage>4390</lpage>. <pub-id pub-id-type="doi">10.1109/TSG.2018.2858206</pub-id></mixed-citation></ref><ref id="pone.0227049.ref011"><label>11</label><mixed-citation publication-type="journal">
<name><surname>Chakraborty</surname><given-names>P</given-names></name>, <name><surname>Baeyens</surname><given-names>E</given-names></name>, <name><surname>Khargonekar</surname><given-names>PP</given-names></name>. <article-title>Cost Causation Based Allocations of Costs for Market Integration of Renewable Energy</article-title>. <source>IEEE Transactions on Power Systems</source>. <year>2018</year>;<volume>33</volume>(<issue>1</issue>):<fpage>70</fpage>&#x02013;<lpage>83</lpage>. <pub-id pub-id-type="doi">10.1109/TPWRS.2017.2690404</pub-id></mixed-citation></ref><ref id="pone.0227049.ref012"><label>12</label><mixed-citation publication-type="other">Chakraborty P, Baeyens E, Khargonekar PP, Poolla K. A cooperative game for the realized profit of an aggregation of renewable energy producers. In: 2016 IEEE 55th Conference on Decision and Control (CDC); 2016. p. 5805&#x02013;5812.</mixed-citation></ref><ref id="pone.0227049.ref013"><label>13</label><mixed-citation publication-type="journal">
<name><surname>Zhou</surname><given-names>Q</given-names></name>, <name><surname>Shahidehpour</surname><given-names>M</given-names></name>, <name><surname>Sun</surname><given-names>T</given-names></name>, <name><surname>Feng</surname><given-names>D</given-names></name>, <name><surname>Yan</surname><given-names>M</given-names></name>. <article-title>Cooperative Game for Carbon Obligation Allocation Among Distribution System Operators to Incentivize the Proliferation of Renewable Energy</article-title>. <source>IEEE Transactions on Smart Grid</source>. <year>2019</year>;<volume>10</volume>(<issue>6</issue>):<fpage>6355</fpage>&#x02013;<lpage>6365</lpage>. <pub-id pub-id-type="doi">10.1109/TSG.2019.2903686</pub-id></mixed-citation></ref><ref id="pone.0227049.ref014"><label>14</label><mixed-citation publication-type="journal">
<name><surname>Aghajani</surname><given-names>S</given-names></name>, <name><surname>Kalantar</surname><given-names>M</given-names></name>. <article-title>A cooperative game theoretic analysis of electric vehicles parking lot in smart grid</article-title>. <source>Energy</source>. <year>2017</year>;<volume>137</volume>:<fpage>129</fpage>&#x02013;<lpage>139</lpage>. <pub-id pub-id-type="doi">10.1016/j.energy.2017.07.006</pub-id></mixed-citation></ref><ref id="pone.0227049.ref015"><label>15</label><mixed-citation publication-type="journal">
<name><surname>Airiau</surname><given-names>S</given-names></name>. <article-title>Cooperative games and multiagent systems</article-title>. <source>The Knowledge Engineering Review</source>. <year>2013</year>;<volume>28</volume>(<issue>4</issue>):<fpage>381</fpage>&#x02013;<lpage>424</lpage>. <pub-id pub-id-type="doi">10.1017/S0269888913000106</pub-id></mixed-citation></ref><ref id="pone.0227049.ref016"><label>16</label><mixed-citation publication-type="book">
<name><surname>Fang</surname><given-names>Q</given-names></name>. In: <name><surname>Kao</surname><given-names>MY</given-names></name>, editor. <source>Complexity of Core</source>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>Springer New York</publisher-name>; <year>2016</year> p. <fpage>372</fpage>&#x02013;<lpage>375</lpage>.</mixed-citation></ref><ref id="pone.0227049.ref017"><label>17</label><mixed-citation publication-type="journal">
<name><surname>Greco</surname><given-names>G</given-names></name>, <name><surname>Malizia</surname><given-names>E</given-names></name>, <name><surname>Palopoli</surname><given-names>L</given-names></name>, <name><surname>Scarcello</surname><given-names>F</given-names></name>. <article-title>On the complexity of core, kernel, and bargaining set</article-title>. <source>Artificial Intelligence</source>. <year>2011</year>;<volume>175</volume>(<issue>12</issue>):<fpage>1877</fpage>&#x02013;<lpage>1910</lpage>. <pub-id pub-id-type="doi">10.1016/j.artint.2011.06.002</pub-id></mixed-citation></ref><ref id="pone.0227049.ref018"><label>18</label><mixed-citation publication-type="book">
<name><surname>Maschler</surname><given-names>M</given-names></name>, <name><surname>Solan</surname><given-names>E</given-names></name>, <name><surname>Zamir</surname><given-names>S</given-names></name>. In: <source>The bargaining set</source>. <publisher-name>Cambridge University Press</publisher-name>; <year>2013</year> p. <fpage>782</fpage>&#x02013;<lpage>800</lpage>.</mixed-citation></ref><ref id="pone.0227049.ref019"><label>19</label><mixed-citation publication-type="book">
<name><surname>Shapley</surname><given-names>L</given-names></name>. <chapter-title>A value for n-person games</chapter-title>
<source>Contributions to the theory of games</source>. <year>1953</year>; p. <fpage>307</fpage>&#x02013;<lpage>317</lpage>.</mixed-citation></ref><ref id="pone.0227049.ref020"><label>20</label><mixed-citation publication-type="other">Maleki S, Tran-Thanh L, Hines G, Rahwan T, Rogers A. Bounding the Estimation Error of Sampling-based Shapley Value Approximation. In: The Fifth Workshop on Cooperative Games in Multiagent Systems (CoopMAS); 2014.</mixed-citation></ref><ref id="pone.0227049.ref021"><label>21</label><mixed-citation publication-type="other">Mann I, Shapley L. Values for large games IV: Evaluating the electoral college exactly. RAND Corporation; 1962. RM-3158-PR.</mixed-citation></ref><ref id="pone.0227049.ref022"><label>22</label><mixed-citation publication-type="journal">
<name><surname>Owen</surname><given-names>G</given-names></name>. <article-title>Multilinear Extensions of Games</article-title>. <source>Management Science</source>. <year>1972</year>;<volume>18</volume>(<issue>5</issue>):<fpage>64</fpage>&#x02013;<lpage>79</lpage>. <pub-id pub-id-type="doi">10.1287/mnsc.18.5.64</pub-id></mixed-citation></ref><ref id="pone.0227049.ref023"><label>23</label><mixed-citation publication-type="journal">
<name><surname>Bachrach</surname><given-names>Y</given-names></name>, <name><surname>Markakis</surname><given-names>E</given-names></name>, <name><surname>Resnick</surname><given-names>E</given-names></name>, <name><surname>Procaccia</surname><given-names>AD</given-names></name>, <name><surname>Rosenschein</surname><given-names>JS</given-names></name>, <name><surname>Saberi</surname><given-names>A</given-names></name>. <article-title>Approximating power indices: theoretical and empirical analysis</article-title>. <source>Autonomous Agents and Multi-Agent Systems</source>. <year>2010</year>;<volume>20</volume>(<issue>2</issue>):<fpage>105</fpage>&#x02013;<lpage>122</lpage>. <pub-id pub-id-type="doi">10.1007/s10458-009-9078-9</pub-id></mixed-citation></ref><ref id="pone.0227049.ref024"><label>24</label><mixed-citation publication-type="journal">
<name><surname>Shaheen</surname><given-names>F</given-names></name>, <name><surname>Jennings</surname><given-names>NR</given-names></name>. <article-title>A Linear Approximation Method for the Shapley Value</article-title>. <source>Artificial Intelligence Journal</source>. <year>2008</year>;<volume>172</volume>(<issue>14</issue>):<fpage>1673</fpage>&#x02013;<lpage>1699</lpage>. <pub-id pub-id-type="doi">10.1016/j.artint.2008.05.003</pub-id></mixed-citation></ref><ref id="pone.0227049.ref025"><label>25</label><mixed-citation publication-type="journal">
<name><surname>Sandholm</surname><given-names>TW</given-names></name>, <name><surname>Lesser</surname><given-names>VR</given-names></name>. <article-title>Coalitions Among Computationally Bounded Agents</article-title>. <source>Artificial Intelligence</source>. <year>1997</year>;<volume>94</volume>(<issue>1-2</issue>):<fpage>99</fpage>&#x02013;<lpage>137</lpage>. <pub-id pub-id-type="doi">10.1016/S0004-3702(97)00030-1</pub-id></mixed-citation></ref><ref id="pone.0227049.ref026"><label>26</label><mixed-citation publication-type="journal">
<name><surname>Thrall</surname><given-names>RM</given-names></name>, <name><surname>Lucas</surname><given-names>WF</given-names></name>. <article-title>N-person games in partition function form</article-title>. <source>Naval Research Logistics Quarterly</source>. <year>1963</year>;<volume>10</volume>(<issue>1</issue>):<fpage>281</fpage>&#x02013;<lpage>298</lpage>. <pub-id pub-id-type="doi">10.1002/nav.3800100126</pub-id></mixed-citation></ref><ref id="pone.0227049.ref027"><label>27</label><mixed-citation publication-type="other">Y Guo GP R Li, Zeman A. A Simulator for Self-Adaptive Energy Demand Management. In: Proceedings of the 2nd IEEE International Conference on Self-Adaptive and Self-Organizing Systems; 2008. p. 64&#x02013;73.</mixed-citation></ref><ref id="pone.0227049.ref028"><label>28</label><mixed-citation publication-type="other">Rogers A, Maleki S, Ghosh S, Jennings NR. Adaptive Home Heating Control Through Gaussian Process Prediction and Mathematical Programming. In: The Second International Workshop on Agent Technologies for Energy Systems (ATES), The 10th International Conference on Autonomous Agents and Multiagent Systems; 2011.</mixed-citation></ref><ref id="pone.0227049.ref029"><label>29</label><mixed-citation publication-type="journal">
<name><surname>Andersen</surname><given-names>K</given-names></name>, <name><surname>Madsen</surname><given-names>H</given-names></name>, <name><surname>Hansen</surname><given-names>L</given-names></name>. <article-title>Modelling the Heat Dynamics of a Building using Stochastic Differential Equations</article-title>. <source>Energy and Buildings</source>. <year>2000</year>;<volume>31</volume>(<issue>1</issue>):<fpage>13</fpage>&#x02013;<lpage>24</lpage>. <pub-id pub-id-type="doi">10.1016/S0378-7788(98)00069-3</pub-id></mixed-citation></ref><ref id="pone.0227049.ref030"><label>30</label><mixed-citation publication-type="journal">
<name><surname>Bacher</surname><given-names>P</given-names></name>, <name><surname>Madsen</surname><given-names>H</given-names></name>. <article-title>Identifying Suitable Models for the Heat Dynamics of Buildings</article-title>. <source>Energy and Buildings</source>. <year>2011</year>;<volume>43</volume>(<issue>7</issue>):<fpage>1511</fpage>&#x02013;<lpage>1522</lpage>. <pub-id pub-id-type="doi">10.1016/j.enbuild.2011.02.005</pub-id></mixed-citation></ref><ref id="pone.0227049.ref031"><label>31</label><mixed-citation publication-type="book">
<name><surname>Simon</surname><given-names>D</given-names></name>. <source>Optimal State Estimation: Kalman, H Infinity, and Nonlinear Approaches</source>. <publisher-loc>New York, NY, USA</publisher-loc>: <publisher-name>Wiley-Interscience</publisher-name>; <year>2006</year>.</mixed-citation></ref><ref id="pone.0227049.ref032"><label>32</label><mixed-citation publication-type="journal">
<name><surname>Aswani</surname><given-names>A</given-names></name>, <name><surname>Master</surname><given-names>N</given-names></name>, <name><surname>Taneja</surname><given-names>J</given-names></name>, <name><surname>Culler</surname><given-names>DE</given-names></name>, <name><surname>Tomlin</surname><given-names>C</given-names></name>. <article-title>Reducing Transient and Steady State Electricity Consumption in HVAC Using Learning-Based Model-Predictive Control</article-title>. <source>Proceedings of the IEEE</source>. <year>2012</year>;<volume>100</volume>(<issue>1</issue>):<fpage>240</fpage>&#x02013;<lpage>253</lpage>. <pub-id pub-id-type="doi">10.1109/JPROC.2011.2161242</pub-id></mixed-citation></ref><ref id="pone.0227049.ref033"><label>33</label><mixed-citation publication-type="other">Alam M, Ramchurn S, Rogers A. Cooperative Energy Exchange for the Efficient Use of Energy and Resources in Remote Communities. In: Proceedings of the 12th International Conference on Autonomous Agents and Multiagent Systems (AAMAS). AAMAS&#x02019;13. International Foundation for Autonomous Agents and Multiagent Systems; 2013. p. 731&#x02013;738.</mixed-citation></ref><ref id="pone.0227049.ref034"><label>34</label><mixed-citation publication-type="journal">
<name><surname>Aziz</surname><given-names>H</given-names></name>, <name><surname>Cahan</surname><given-names>C</given-names></name>, <name><surname>Gretton</surname><given-names>C</given-names></name>, <name><surname>Kilby</surname><given-names>P</given-names></name>, <name><surname>Mattei</surname><given-names>N</given-names></name>, <name><surname>Walsh</surname><given-names>T</given-names></name>. <article-title>A Study of Proxies for Shapley Allocations of Transport Costs</article-title>. <source>Journal of Artificial Intelligence Research</source>. <year>2016</year>;<volume>56</volume>(<issue>1</issue>):<fpage>573</fpage>&#x02013;<lpage>611</lpage>. <pub-id pub-id-type="doi">10.1613/jair.5021</pub-id></mixed-citation></ref></ref-list></back></article>